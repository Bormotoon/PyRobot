#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ä–µ–∑, –∞—Ä–≥—Ä–µ–∑) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

from pyrobot.backend.kumir_interpreter.runtime_utils import interpret_kumir

def test_procedure_with_rez_parameter():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º '—Ä–µ–∑' (—Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥)"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º '—Ä–µ–∑'...")
    
    code = """
–∞–ª–≥ —É–≤–µ–ª–∏—á–∏—Ç—å_–Ω–∞_–æ–¥–∏–Ω(–∞—Ä–≥ —Ü–µ–ª x, —Ä–µ–∑ —Ü–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
–Ω–∞—á
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç := x + 1
–∫–æ–Ω

–∞–ª–≥ –≥–ª–∞–≤–Ω—ã–π
–Ω–∞—á
    —Ü–µ–ª a, b
    a := 5
    —É–≤–µ–ª–∏—á–∏—Ç—å_–Ω–∞_–æ–¥–∏–Ω(a, b)
    –≤—ã–≤–æ–¥ "–†–µ–∑—É–ª—å—Ç–∞—Ç: ", b, –Ω—Å
–∫–æ–Ω
"""
    
    try:
        result = interpret_kumir(code.strip())
        print("‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å '—Ä–µ–∑' –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å '—Ä–µ–∑' –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {e}")
        return False

def test_procedure_with_argrez_parameter():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º '–∞—Ä–≥—Ä–µ–∑' (–≤–≤–æ–¥-–≤—ã–≤–æ–¥)"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º '–∞—Ä–≥—Ä–µ–∑'...")
    
    code = """
–∞–ª–≥ —É–¥–≤–æ–∏—Ç—å(–∞—Ä–≥—Ä–µ–∑ —Ü–µ–ª x)
–Ω–∞—á
    x := x * 2
–∫–æ–Ω

–∞–ª–≥ –≥–ª–∞–≤–Ω—ã–π
–Ω–∞—á
    —Ü–µ–ª —á–∏—Å–ª–æ
    —á–∏—Å–ª–æ := 7
    –≤—ã–≤–æ–¥ "–î–æ: ", —á–∏—Å–ª–æ, –Ω—Å
    —É–¥–≤–æ–∏—Ç—å(—á–∏—Å–ª–æ)
    –≤—ã–≤–æ–¥ "–ü–æ—Å–ª–µ: ", —á–∏—Å–ª–æ, –Ω—Å
–∫–æ–Ω
"""
    
    try:
        result = interpret_kumir(code.strip())
        print("‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å '–∞—Ä–≥—Ä–µ–∑' –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å '–∞—Ä–≥—Ä–µ–∑' –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {e}")
        return False

def test_function_with_mixed_parameters():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
    
    code = """
–∞–ª–≥ —Ü–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å(–∞—Ä–≥ —Ü–µ–ª –≤—Ö–æ–¥–Ω–æ–µ, —Ä–µ–∑ —Ü–µ–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ, –∞—Ä–≥—Ä–µ–∑ —Ü–µ–ª –∏–∑–º–µ–Ω—è–µ–º–æ–µ)
–Ω–∞—á
    –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ := –≤—Ö–æ–¥–Ω–æ–µ * 3
    –∏–∑–º–µ–Ω—è–µ–º–æ–µ := –∏–∑–º–µ–Ω—è–µ–º–æ–µ + 10
    –∑–Ω–∞—á := –≤—Ö–æ–¥–Ω–æ–µ + –∏–∑–º–µ–Ω—è–µ–º–æ–µ
–∫–æ–Ω

–∞–ª–≥ –≥–ª–∞–≤–Ω—ã–π
–Ω–∞—á
    —Ü–µ–ª x, y, z, —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    x := 4
    y := 0  | –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ '—Ä–µ–∑'
    z := 15 | –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ '–∞—Ä–≥—Ä–µ–∑'
    
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç := –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å(x, y, z)
    
    –≤—ã–≤–æ–¥ "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: ", —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω—Å
    –≤—ã–≤–æ–¥ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ: ", y, –Ω—Å
    –≤—ã–≤–æ–¥ "–ò–∑–º–µ–Ω—è–µ–º–æ–µ: ", z, –Ω—Å
–∫–æ–Ω
"""
    
    try:
        result = interpret_kumir(code.strip())
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {e}")
        return False

def test_multiple_procedures_with_references():
    """–¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ...")
    
    code = """
–∞–ª–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å(—Ä–µ–∑ —Ü–µ–ª x, —Ä–µ–∑ —Ü–µ–ª y)
–Ω–∞—á
    x := 10
    y := 20
–∫–æ–Ω

–∞–ª–≥ –æ–±–º–µ–Ω—è—Ç—å(–∞—Ä–≥—Ä–µ–∑ —Ü–µ–ª a, –∞—Ä–≥—Ä–µ–∑ —Ü–µ–ª b)
–Ω–∞—á
    —Ü–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–∞—è
    –≤—Ä–µ–º–µ–Ω–Ω–∞—è := a
    a := b
    b := –≤—Ä–µ–º–µ–Ω–Ω–∞—è
–∫–æ–Ω

–∞–ª–≥ –≥–ª–∞–≤–Ω—ã–π
–Ω–∞—á
    —Ü–µ–ª –ø–µ—Ä–≤–æ–µ, –≤—Ç–æ—Ä–æ–µ
    
    –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å(–ø–µ—Ä–≤–æ–µ, –≤—Ç–æ—Ä–æ–µ)
    –≤—ã–≤–æ–¥ "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ", –ø–µ—Ä–≤–æ–µ, ", ", –≤—Ç–æ—Ä–æ–µ, –Ω—Å
    
    –æ–±–º–µ–Ω—è—Ç—å(–ø–µ—Ä–≤–æ–µ, –≤—Ç–æ—Ä–æ–µ)
    –≤—ã–≤–æ–¥ "–ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞: ", –ø–µ—Ä–≤–æ–µ, ", ", –≤—Ç–æ—Ä–æ–µ, –Ω—Å
–∫–æ–Ω
"""
    
    try:
        result = interpret_kumir(code.strip())
        print("‚úÖ –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
        return False

def test_recursive_function_with_references():
    """–¢–µ—Å—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ...")
    
    code = """
–∞–ª–≥ —Ü–µ–ª —Ñ–∏–±–æ–Ω–∞—á—á–∏_–ø–æ–¥—Å—á–µ—Ç(–∞—Ä–≥ —Ü–µ–ª n, –∞—Ä–≥—Ä–µ–∑ —Ü–µ–ª —Å—á–µ—Ç—á–∏–∫)
–Ω–∞—á
    —Å—á–µ—Ç—á–∏–∫ := —Å—á–µ—Ç—á–∏–∫ + 1
    –µ—Å–ª–∏ n <= 1
        —Ç–æ –∑–Ω–∞—á := n
        –∏–Ω–∞—á–µ –∑–Ω–∞—á := —Ñ–∏–±–æ–Ω–∞—á—á–∏_–ø–æ–¥—Å—á–µ—Ç(n - 1, —Å—á–µ—Ç—á–∏–∫) + —Ñ–∏–±–æ–Ω–∞—á—á–∏_–ø–æ–¥—Å—á–µ—Ç(n - 2, —Å—á–µ—Ç—á–∏–∫)
    –≤—Å–µ
–∫–æ–Ω

–∞–ª–≥ –≥–ª–∞–≤–Ω—ã–π
–Ω–∞—á
    —Ü–µ–ª —á–∏—Å–ª–æ, –ø–æ–¥—Å—á–µ—Ç—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    —á–∏—Å–ª–æ := 6
    –ø–æ–¥—Å—á–µ—Ç—ã := 0
    
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç := —Ñ–∏–±–æ–Ω–∞—á—á–∏_–ø–æ–¥—Å—á–µ—Ç(—á–∏—Å–ª–æ, –ø–æ–¥—Å—á–µ—Ç—ã)
    –≤—ã–≤–æ–¥ "–§–∏–±–æ–Ω–∞—á—á–∏(", —á–∏—Å–ª–æ, ") = ", —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω—Å
    –≤—ã–≤–æ–¥ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤: ", –ø–æ–¥—Å—á–µ—Ç—ã, –Ω—Å
–∫–æ–Ω
"""
    
    try:
        result = interpret_kumir(code.strip())
        print("‚úÖ –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–í–ò–ù–£–¢–´–• –†–ï–ñ–ò–ú–û–í –ü–ê–†–ê–ú–ï–¢–†–û–í ===\n")
    
    tests = [
        test_procedure_with_rez_parameter,
        test_procedure_with_argrez_parameter,
        test_function_with_mixed_parameters,
        test_multiple_procedures_with_references,
        test_recursive_function_with_references
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}\n")
    
    print(f"=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ä–µ–∂–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
        return False

if __name__ == "__main__":
    main()
