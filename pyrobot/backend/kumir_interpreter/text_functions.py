"""
Модуль text_functions.py
@description Модуль для функций обработки текста в языке KUMIR.
Реализованы следующие функции:
  - length(text): возвращает количество символов в строке.
  - char_code(c): возвращает порядковый номер символа c в кодировке CP-1251.
  - unicode_code(c): возвращает Unicode-код символа c.
  - char(n): возвращает символ, соответствующий коду CP-1251 n.
  - unicode_char(n): возвращает символ, соответствующий Unicode-коду n.
"""


def length(text):
    """
    Возвращает количество символов в строке.

    Пример:
      length("Привет") → 6

    Параметры:
      text (str): Исходная строка.

    Возвращаемое значение:
      int: Количество символов в строке.
    """
    # Приводим входной параметр к строковому типу и используем функцию len для подсчёта символов.
    return len(str(text))


# Alias для обратной совместимости:
длин = length


def char_code(c):
    """
    Возвращает порядковый номер символа c в кодировке CP-1251.
    Если c не является строкой длины 1, генерируется исключение.

    Пример:
      char_code("А") → 192  (в CP-1251 буква "А" имеет код 192)

    Параметры:
      c (str): Символ, для которого нужно получить код.

    Возвращаемое значение:
      int: Порядковый номер символа в кодировке CP-1251.

    Исключения:
      ValueError: Если входной аргумент не является строкой длины 1 или при ошибке кодирования.
    """
    s = str(c)
    if len(s) != 1:
        raise ValueError("Function 'char_code' expects a string of length 1")
    try:
        # Пробуем закодировать символ в кодировке CP-1251
        encoded = s.encode('cp1251')
    except Exception as e:
        raise ValueError(f"Error encoding character '{s}' in CP-1251: {e}")
    # Возвращаем первый байт, который и является кодом символа в данной кодировке
    return encoded[0]


# Alias для обратной совместимости:
код = char_code


def unicode_code(c):
    """
    Возвращает Unicode-код символа c.

    Пример:
      unicode_code("А") → 1040

    Параметры:
      c (str): Символ, для которого необходимо получить Unicode-код.

    Возвращаемое значение:
      int: Unicode-код символа.

    Исключения:
      ValueError: Если c не является строкой длины 1.
    """
    s = str(c)
    if len(s) != 1:
        raise ValueError("Function 'unicode_code' expects a string of length 1")
    # Используем встроенную функцию ord для получения Unicode-кода символа.
    return ord(s)


# Alias для обратной совместимости:
юникод = unicode_code


def char(n):
    """
    Возвращает символ, соответствующий коду n в кодировке CP-1251.
    Если число n не является корректным байтом, генерируется исключение.

    Пример:
      char(192) → "А"

    Параметры:
      n (int): Числовое значение, представляющее код символа в CP-1251.

    Возвращаемое значение:
      str: Символ, соответствующий заданному коду.

    Исключения:
      ValueError: Если число n не может быть корректно преобразовано в символ по CP-1251.
    """
    try:
        n_int = int(n)
        # Создаем объект bytes из одного байта и декодируем его с использованием кодировки CP-1251.
        b = bytes([n_int])
        return b.decode('cp1251')
    except Exception as e:
        raise ValueError(f"Error converting number {n} to a CP-1251 character: {e}")


# Alias для обратной совместимости:
символ = char


def unicode_char(n):
    """
    Возвращает символ, соответствующий Unicode-коду n.

    Пример:
      unicode_char(1040) → "А"

    Параметры:
      n (int): Числовое значение, представляющее Unicode-код символа.

    Возвращаемое значение:
      str: Символ, соответствующий заданному Unicode-коду.

    Исключения:
      ValueError: Если n не может быть корректно преобразовано в символ.
    """
    try:
        return chr(int(n))
    except Exception as e:
        raise ValueError(f"Error converting number {n} to a Unicode character: {e}")


# Alias для обратной совместимости:
юнисимвол = unicode_char
