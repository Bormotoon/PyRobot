// KumirLexer.g4
// Лексер ANTLR v4 для языка КуМир.
// Определяет, как исходный код разбивается на токены (ключевые слова, идентификаторы, операторы и т.д.).
// Примечание: Сохраняйте и обрабатывайте этот файл и исходный код КуМир в кодировке UTF-8.
lexer grammar KumirLexer;

// --- Ключевые слова (основной язык) ---
// Определяем токены для всех ключевых слов языка.
// Используем альтернативы для поддержки разного регистра (например, 'модуль' и 'МОДУЛЬ').
MODULE              : ('модуль' | 'МОДУЛЬ');
// Для `конец модуля` и подобных обрабатываем разные варианты написания (с пробелом, слитно, с подчеркиванием).
ENDMODULE           : ('конец' WS 'модуля' | 'КОНЕЦ' WS 'МОДУЛЯ' | 'конецмодуля' | 'КОНЕЦМОДУЛЯ' | 'конец_модуля' | 'КОНЕЦ_МОДУЛЯ');
ALG_HEADER          : ('алг' | 'АЛГ');
ALG_BEGIN           : ('нач' | 'НАЧ');
ALG_END             : ('кон' | 'КОН');
PRE_CONDITION       : ('дано' | 'ДАНО');
POST_CONDITION      : ('надо' | 'НАДО');
ASSERTION           : ('утв' | 'УТВ');
LOOP                : ('нц' | 'НЦ');
// Для `кц при` обрабатываем варианты с пробелом и подчеркиванием.
ENDLOOP_COND        : ('кц' WS 'при') | 'кц_при' | ('КЦ' WS 'ПРИ') | 'КЦ_ПРИ';
ENDLOOP             : ('кц' | 'КЦ');
IF                  : ('если' | 'ЕСЛИ');
THEN                : ('то' | 'ТО');
ELSE                : ('иначе' | 'ИНАЧЕ');
FI                  : ('все' | 'ВСЕ'); // Конец блока 'если' или 'выбор'
SWITCH              : ('выбор' | 'ВЫБОР');
CASE                : ('при' | 'ПРИ'); // Используется в 'выбор' и 'кц при'
INPUT               : ('ввод' | 'ВВОД');
OUTPUT              : ('вывод' | 'ВЫВОД');
ASSIGN              : ':='; // Оператор присваивания
EXIT                : ('выход' | 'ВЫХОД');
PAUSE               : ('пауза' | 'ПАУЗА');
STOP                : ('стоп' | 'СТОП');
IMPORT              : ('использовать' | 'ИСПОЛЬЗОВАТЬ');
FOR                 : ('для' | 'ДЛЯ');
WHILE               : ('пока' | 'ПОКА');
TIMES               : ('раз' | 'РАЗ'); // Используется в цикле 'N раз'
FROM                : ('от' | 'ОТ'); // Используется в цикле 'для'
TO                  : ('до' | 'ДО'); // Используется в цикле 'для'
STEP                : ('шаг' | 'ШАГ'); // Используется в цикле 'для'
NEWLINE_CONST       : ('нс' | 'НС'); // Константа новой строки для вывода/ввода
NOT                 : ('не' | 'НЕ'); // Логическое НЕ
AND                 : ('и' | 'И'); // Логическое И
OR                  : ('или' | 'ИЛИ'); // Логическое ИЛИ
OUT_PARAM           : ('рез' | 'РЕЗ'); // Параметр-результат
IN_PARAM            : ('арг' | 'АРГ'); // Параметр-аргумент
// Для `арг рез` обрабатываем варианты: слитно, с пробелом, с подчеркиванием.
INOUT_PARAM         : ('аргрез' | 'АРГРЕЗ' | 'арг' WS 'рез' | 'АРГ' WS 'РЕЗ' | 'арг_рез' | 'АРГ_РЕЗ');
RETURN_VALUE        : ('знач' | 'ЗНАЧ'); // Служебная переменная для результата функции

// --- Типы данных ---
INTEGER_TYPE        : ('цел' | 'ЦЕЛ');
REAL_TYPE           : ('вещ' | 'ВЕЩ');
BOOLEAN_TYPE        : ('лог' | 'ЛОГ');
CHAR_TYPE           : ('сим' | 'СИМ');
STRING_TYPE         : ('лит' | 'ЛИТ');
TABLE_SUFFIX        : 'таб' | 'ТАБ'; // Суффикс для таблиц (может быть избыточен при наличии явных типов массивов)
// Типы исполнителей
KOMPL_TYPE          : ('компл' | 'КОМПЛ'); // Комплексные числа
COLOR_TYPE          : ('цвет' | 'ЦВЕТ');   // Цвет (Рисователь)
SCANCODE_TYPE       : ('сканкод' | 'СКАНКОД'); // Скан-код клавиши (Клавиатура)
FILE_TYPE           : ('файл' | 'ФАЙЛ');   // Файловый тип
// Явные типы массивов (таблиц). Обрабатывают варианты написания (пробел, слитно, подчеркивание).
INTEGER_ARRAY_TYPE  : ('цел' WS? 'таб' | 'ЦЕЛ' WS? 'ТАБ' | 'цел_таб' | 'ЦЕЛ_ТАБ');
REAL_ARRAY_TYPE     : ('вещ' WS? 'таб' | 'ВЕЩ' WS? 'ТАБ' | 'вещ_таб' | 'ВЕЩ_ТАБ');
CHAR_ARRAY_TYPE     : ('сим' WS? 'таб' | 'СИМ' WS? 'ТАБ' | 'сим_таб' | 'СИМ_ТАБ');
STRING_ARRAY_TYPE   : ('лит' WS? 'таб' | 'ЛИТ' WS? 'ТАБ' | 'лит_таб' | 'ЛИТ_ТАБ');
BOOLEAN_ARRAY_TYPE  : ('лог' WS? 'таб' | 'ЛОГ' WS? 'ТАБ' | 'лог_таб' | 'ЛОГ_ТАБ');

// --- Константы ---
TRUE                : ('да' | 'ДА');
FALSE               : ('нет' | 'НЕТ');
// Константы цветов
PROZRACHNIY         : ('прозрачный' | 'ПРОЗРАЧНЫЙ');
BELIY               : ('белый' | 'БЕЛЫЙ');
CHERNIY             : ('чёрный' | 'черный' | 'ЧЁРНЫЙ' | 'ЧЕРНЫЙ');
SERIY               : ('серый' | 'СЕРЫЙ');
FIOLETOVIY          : ('фиолетовый' | 'ФИОЛЕТОВЫЙ');
SINIY               : ('синий' | 'СИНИЙ');
GOLUBOY             : ('голубой' | 'ГОЛУБОЙ');
ZELENIY             : ('зелёный' | 'зеленый' | 'ЗЕЛЁНЫЙ' | 'ЗЕЛЕНЫЙ');
ZHELTIY             : ('жёлтый' | 'желтый' | 'ЖЁЛТЫЙ' | 'ЖЕЛТЫЙ');
ORANZHEVIY          : ('оранжевый' | 'ОРАНЖЕВЫЙ');
KRASNIY             : ('красный' | 'КРАСНЫЙ');

// --- Операторы ---
POWER               : '**'; // Возведение в степень
GE                  : '>=' | '≥'; // Больше или равно
LE                  : '<=' | '≤'; // Меньше или равно
NE                  : '<>' | '≠'; // Не равно
PLUS                : '+';
MINUS               : '-';
MUL                 : '*';
DIV                 : '/';
EQ                  : '='; // Равно (используется в сравнениях и инициализации)
LT                  : '<';
GT                  : '>';
LPAREN              : '('; // Левая круглая скобка
RPAREN              : ')'; // Правая круглая скобка
LBRACK              : '['; // Левая квадратная скобка (массивы)
RBRACK              : ']'; // Правая квадратная скобка (массивы)
LBRACE              : '{'; // Левая фигурная скобка (массивные литералы)
RBRACE              : '}'; // Правая фигурная скобка (массивные литералы)
COMMA               : ','; // Запятая
COLON               : ':'; // Двоеточие (границы массива, формат вывода)
SEMICOLON           : ';'; // Точка с запятой (разделитель операторов)
ATAT                : '@@'; // Двойная собака (спец. функции в КуМир для учителя)
AT                  : '@';  // Собака (используется в идентификаторах)

// --- Литералы ---
// Символьный литерал: один символ в одинарных кавычках
CHAR_LITERAL        : '\'' ( EscapeSequence | ~['\\\r\n] ) '\'' ;
// Строковый литерал: последовательность символов в двойных или одинарных кавычках
STRING              : '"' ( EscapeSequence | ~["\\\r\n] )*? '"'
                    | '\'' ( EscapeSequence | ~['\\\r\n] )*? '\''
                    ;
// Вещественный литерал: с десятичной точкой или в экспоненциальной форме
REAL                : (DIGIT+ '.' DIGIT* | '.' DIGIT+) ExpFragment? // 123. , .5 , 123.45
                    | DIGIT+ ExpFragment                          // 123e4
                    ;
// Целочисленный литерал: десятичный или шестнадцатеричный (начинается с $)
INTEGER             : DecInteger | HexInteger ;

// --- Идентификатор ---
// Имя переменной, алгоритма, модуля и т.д.
// Начинается с буквы, далее буквы, цифры, '_' или '@'.
ID                  : LETTER (LETTER | DIGIT | '_' | '@')* ;

// --- Комментарии ---
// Комментарии, начинающиеся с '|' или '#', игнорируются парсером.
// Возвращены к версии, которая НЕ захватывает символ новой строки (\n).
// Текст комментария отправляется на скрытый канал (HIDDEN).
LINE_COMMENT        : '|' ~[\r\n]* -> channel(HIDDEN); // Однострочный комментарий
DOC_COMMENT         : '#' ~[\r\n]* -> channel(HIDDEN); // Документирующий комментарий

// --- Пробельные символы ---
// Пробелы, табы, переводы строк пропускаются лексером (`skip`).
WS                  : [ \t\r\n]+ -> skip;

/*
 * =============================================================================
 * Фрагменты (вспомогательные правила лексера)
 * =============================================================================
 * Фрагменты не создают токенов сами по себе, а используются внутри других правил лексера.
 */

// Цифра от 0 до 9
fragment DIGIT      : [0-9];
// Шестнадцатеричная цифра (0-9, a-f, A-F)
fragment HEX_DIGIT  : [0-9a-fA-F];
// Буква (латиница или кириллица, включая ё/Ё)
fragment LETTER     : [a-zA-Zа-яА-ЯёЁ];
// Десятичное целое число
fragment DecInteger : DIGIT+;
// Шестнадцатеричное целое число (начинается с $)
fragment HexInteger : '$' HEX_DIGIT+;
// Экспоненциальная часть вещественного числа (e+10, Е-5 и т.д.)
fragment ExpFragment: [eEеЕ] [+-]? DIGIT+;
// Управляющие последовательности внутри строк/символов (\n, \t и т.д.)
fragment EscapeSequence
                    : '\\' [btnfr"'\\] // \b, \t, \n, \f, \r, \", \', \\
                    ;
// Конец файла KumirLexer.g4