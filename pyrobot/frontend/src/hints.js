/**
 * Массивы подсказок для каждого действия.
 * Каждое поле (ключ) содержит несколько вариантов, чтобы при повторных действиях текст менялся.
 */
export const HINTS = {
    initial: [
        "Добро пожаловать в симулятор! Используйте кнопки слева, чтобы управлять роботом.",
        "Стартуем! Слева — панель управления: двигайте робота, рисуйте стены и ставьте маркеры.",
        "Привет! Для перемещения робота и редактирования поля нажимайте соответствующие кнопки слева.",
        "Вы в игре! Чтобы начать, двигайте робота или войдите в режим редактирования.",
        "Здравствуйте! Это поле управления: кнопки слева, а здесь — ваше игровое пространство.",
        "Симулятор запущен! Попробуйте покликать на стрелки или войти в режим редактирования."
    ],

    // Движение робота
    moveRobotUp: [
        "Робот переместился вверх на одну клетку. Проверяем, нет ли там стены!",
        "Осторожно: робот двигается вверх. Надеемся, путь чист.",
        "Вы указали движение вверх — робот сделал шаг выше.",
        "Движение вверх выполнено. Следите, чтобы сверху не было препятствий!",
        "Робот смело пошёл на север. Если там была стена, он бы не двинулся.",
        "Робот смотрит вперёд и двигается вверх, на новую клетку."
    ],
    moveRobotDown: [
        "Робот идёт вниз. Проверьте, не упирается ли он в стену снизу!",
        "Движение вниз: робот сделал шаг к югу.",
        "Вы нажали вниз, робот переместился на одну клетку ниже.",
        "Робот двигается вниз по клеткам, стараясь обойти стены.",
        "Выполнено движение вниз. Надеемся, путь был свободен!",
        "Робот шагнул на юг — если была стена, он остался бы на месте."
    ],
    moveRobotLeft: [
        "Робот двинулся влево. Слева может быть стена или граница.",
        "Движение влево успешно: робот на новой клетке слева.",
        "Робот прошёл на одну клетку левее. Надеемся, там не было преград.",
        "Робот поехал на запад. Если слева была стена, движение не произошло бы.",
        "Команда «влево» принята. Следите за стенами, чтобы не застрять!",
        "Робот спокойно переместился на одну клетку левее."
    ],
    moveRobotRight: [
        "Робот двинулся вправо. Справа могла быть стена или край поля!",
        "Движение вправо: робот шагнул на одну клетку направо.",
        "Робот отправился на восток, надеемся, путь был свободен.",
        "Команда «вправо» выполнена — если стена отсутствовала.",
        "Робот сместился вправо, теперь занимает новую клетку.",
        "Нажата кнопка «→». Робот сделал шаг к востоку."
    ],

    // Маркеры
    putMarker: [
        "Вы поставили маркер в клетку, где сейчас робот.",
        "Маркер добавлен: теперь в этой клетке есть отметка.",
        "На текущей клетке робота появился белый кружок-маркер.",
        "Отлично! Маркер установлен там, где стоит робот.",
        "Добавлен маркер под роботом. Можно поднять его кнопкой «Pick Marker».",
        "Маркер поставлен — маленький белый кружочек в позиции робота."
    ],
    pickMarker: [
        "Вы подняли маркер. Клетка теперь без маркера.",
        "Маркер удалён — видимо, он вам пригодится.",
        "Забрали маркер с текущей клетки робота.",
        "Маркер, который лежал под роботом, исчез.",
        "Вы успешно сняли маркер. Теперь робот в чистой клетке.",
        "Маркер поднят, чтобы можно было переместить его в другое место."
    ],

    // Покраска ячейки
    paintCell: [
        "Вы закрасили клетку под роботом серым цветом.",
        "Клетка покрашена! Теперь она выделяется из остальных.",
        "Клетка, где стоит робот, стала закрашенной.",
        "Ячейка под роботом приобрела серый оттенок.",
        "Покраска удалась. Если захотите, её можно очистить.",
        "Клетка успешно закрашена под ногами робота."
    ],
    clearCell: [
        "Вы стёрли краску с клетки под роботом — она снова обычная.",
        "Клетка очистилась и вернулась в исходный вид.",
        "Очистка выполнена: закраска снята с клетки.",
        "Вы убрали цвет с текущей клетки робота.",
        "Теперь клетка под роботом снова не закрашена.",
        "Краска удалена — клетка возвращена в неизменённое состояние."
    ],

    // Режим редактирования
    enterEditMode: [
        "Режим редактирования включён. Вы можете ставить стены и маркеры.",
        "Вы вошли в режим редактирования: клики по границам клеток — стены, правый клик — маркер.",
        "Edit Mode: отныне можно рисовать стены, красить клетки и ставить маркеры по клику.",
        "Режим редактирования активирован. Будьте осторожны: клик может поставить стену!",
        "Внимание! Теперь вы в режиме редактирования, можно редактировать поле мышкой.",
        "Edit Mode: используйте левый клик для стен/покраски, правый клик для маркеров."
    ],
    exitEditMode: [
        "Режим редактирования отключён. Робот снова свободно перемещается.",
        "Вы вышли из Edit Mode — теперь клики по полю не ставят стены и маркеры.",
        "Редактирование завершено, стен и раскраски по клику больше не будет.",
        "Режим редактирования выключен. Нажмите 'Enter Edit Mode', чтобы вернуться к правкам.",
        "Edit Mode покинут. Все клики мышью теперь не будут изменять поле.",
        "Режим редактирования теперь неактивен. Робот двигается без случайных помех."
    ],

    // Изменение размеров поля
    increaseWidth: [
        "Вы увеличили ширину поля на одну клетку. Возможно, стоит достроить стены по краям?",
        "Ширина поля +1. Теперь у робота ещё больше простора для движения!",
        "Поле стало шире: количество клеток по горизонтали возросло.",
        "Вы расширили поле вправо. Проверьте, где теперь граница.",
        "Ширина поля выросла — можно добавить стену на новом краю.",
        "Поле стало чуть просторнее по горизонтали!"
    ],
    decreaseWidth: [
        "Вы уменьшили ширину поля. Если робот был за краем, он сдвинется к границе.",
        "Минус одна клетка по ширине. Проверьте, что ничего важного не отрезано.",
        "Ширина поля сокращена: поле сузилось. Возможно, стены тоже изменились.",
        "Поле стало уже. Робот по-прежнему в допустимых координатах?",
        "Ширина уменьшена — внимательно посмотрите, где теперь робот.",
        "Поле съёжилось, но функционал остался прежним!"
    ],
    increaseHeight: [
        "Поле выросло в высоту на одну клетку. Новые места для исследования!",
        "Теперь высота на одну клетку больше. Можно добавить стену снизу/сверху.",
        "Вы увеличили поле по вертикали. Следите, чтоб робот мог ходить по новым клеткам.",
        "Высота поля +1. Робот пока не видит границу, но можно установить стену.",
        "Поле стало выше: есть где развернуться!",
        "Ещё одна клетка сверху (или снизу) добавлена к полю."
    ],
    decreaseHeight: [
        "Высота поля уменьшена. Если робот был за пределами, он вернётся в доступную область.",
        "Минус одна клетка по высоте. Поле стало компактнее.",
        "Вы «срезали» поле сверху или снизу. Надеемся, робот не был там!",
        "Поле сузилось по вертикали: теперь клеток меньше.",
        "Высота поля сократилась, аккуратнее с роботами и стенами.",
        "Снизу/сверху отрезана лишняя строка — поле теперь меньше по высоте."
    ],

    // Действия с холстом (Canvas)
    canvasLeftClickEditMode: [
        "Левый клик в режиме редактирования. Попадание на границу — стена, в центр — покраска.",
        "В режиме редактирования левый клик — или нарисовать стену, или раскрасить клетку.",
        "Вы кликнули слева, редактируя поле: граница клетки = стена, иначе — покраска.",
        "Левый щелчок: стена, если рядом с краем, покраска, если внутри клетки.",
        "В Edit Mode левый клик может преобразовать поле: стены или покраска.",
        "Редактирование: левый клик — основной способ ставить стены или красить ячейки."
    ],
    canvasRightClickEditMode: [
        "Правый клик в режиме редактирования: поставить или убрать маркер.",
        "В Edit Mode правый клик по клетке — это маркер.",
        "Вы нажали правую кнопку. Если попали в клетку, маркер добавлен/убран.",
        "Правый щелчок = маркер: легко поставить и снять.",
        "Редактирование: правый клик — управление маркерами в клетках.",
        "Используя правую кнопку, можно пометить любую клетку маркером."
    ],
    canvasLeftClickNoEdit: [
        "Вы кликнули левой кнопкой, но режим редактирования выключен. Ничего не изменилось.",
        "Вне режима редактирования левый клик не действует на поле.",
        "Левый клик без Edit Mode не приносит результатов: попробуйте включить редактирование.",
        "Выключен Edit Mode — левая кнопка мыши не изменяет поле.",
        "Нажат левый клик, но редактирование не активно, так что нет эффекта.",
        "Без Edit Mode поле не меняется от левого щелчка."
    ],
    canvasRightClickNoEdit: [
        "Правый клик без Edit Mode: никакого действия не произойдёт.",
        "Ничего не случилось, так как вы не в режиме редактирования.",
        "Вне редактирования правый клик не ставит маркер.",
        "Режим редактирования отключён — правый клик по полю не работает.",
        "Вы нажали правую кнопку, но без Edit Mode маркер не поставить.",
        "Без Edit Mode правый клик не даёт результата."
    ],

    // Прокрутка колёсиком
    wheelZoomIn: [
        "Вы приблизили поле (увеличили размер клеток).",
        "Масштаб вырос: клетки стали крупнее.",
        "Размер ячеек увеличен. Изучать поле стало проще, но меньше влезает на экран.",
        "Зум приближения: клетки стали больше, детали виднее!",
        "Увеличение клеток: теперь каждая клетка заметно крупнее.",
        "Вы подкрутили колёсико, и поле 'приблизилось'."
    ],
    wheelZoomOut: [
        "Вы отдалили поле (уменьшили размер клеток).",
        "Масштаб уменьшен: клетки стали мельче, но поле умещается лучше.",
        "Зум удаления: теперь видно большее пространство, но клетки меньше.",
        "Сделали клетки меньше: поле кажется просторным!",
        "Уменьшение клеток: робот и стены всё ещё видны, но масштабы другие.",
        "Вы прокрутили колёсико, уменьшив масштаб поля."
    ],
};

/**
 * lastUsedHints хранит для каждого action последнюю выданную подсказку,
 * чтобы не повторять её при следующем вызове.
 *   Ключ:   action (строка)
 *   Значение: последняя строка (подсказка), которая была возвращена.
 */
const lastUsedHints = {};

/**
 * Возвращает одну из нескольких вариантов подсказки для указанного действия и режима,
 * гарантируя, что не повторится два раза подряд.
 *
 * @param {string} action - Ключ действия (например "moveRobotUp").
 * @param {boolean} editMode - Текущий режим редактирования (на случай, если хочется расширять логику).
 * @returns {string} - Одна из возможных подсказок (выбирается случайно).
 */
export function getHint(action, editMode = false) {
    // Проверяем, есть ли такой массив подсказок
    if (!HINTS[action] || HINTS[action].length === 0) {
        return "";
    }

    const hintsArray = HINTS[action];
    // Если в массиве всего один вариант, придётся вернуть его
    if (hintsArray.length === 1) {
        return hintsArray[0];
    }

    let randomIndex = Math.floor(Math.random() * hintsArray.length);
    const lastUsed = lastUsedHints[action] || null;

    // Если массив больше 1, мы хотим исключить ситуацию,
    // когда выбранная подсказка совпадает с последней.
    // Алгоритм:
    //   - Если выбранная подсказка совпала с последней,
    //     выбираем заново, пока не найдём другую.
    //   - Если массив всего из 2 элементов, то при совпадении
    //     достаточно просто взять другой (т.е. randomIndex + 1 % 2).

    if (hintsArray.length === 2) {
        // Если только 2 варианта, то при совпадении
        // просто берём второй из двух
        while (hintsArray[randomIndex] === lastUsed) {
            randomIndex = (randomIndex + 1) % 2;
        }
    } else {
        // Если вариантов больше 2, крутим цикл, пока не попадём на новую подсказку
        while (hintsArray[randomIndex] === lastUsed) {
            randomIndex = Math.floor(Math.random() * hintsArray.length);
        }
    }

    const selectedHint = hintsArray[randomIndex];
    // Запоминаем этот вариант как "последний" для данного action
    lastUsedHints[action] = selectedHint;

    return selectedHint;
}
