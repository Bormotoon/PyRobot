// FILE START: hints.js
/**
 * hints.js
 *
 * Хранит тексты подсказок для пользователя для различных действий в симуляторе.
 * Функция getHint выбирает случайную подсказку для действия, избегая повторов.
 */

// --- Обновленный объект HINTS ---
export const HINTS = {
	// --- Общее ---
	initial: [
		"Привет! Начни с написания кода или изучи кнопки справа.",
		"Симулятор готов! Попробуй подвигать робота или нарисовать стены.",
		"Добро пожаловать! Справа панель управления, слева редактор кода.",
		"Поле ждет команд! Напиши код или воспользуйся панелью управления.",
		"На старт! Используй кнопки или код, чтобы управлять роботом."
	],
	reset: [
		"Все сброшено! Поле и робот вернулись в начальное состояние.",
		"Сброс выполнен. Можно начинать заново!",
		"Состояние симулятора очищено.",
		"Начальные установки восстановлены.",
		"Поле чистое, робот на старте."
	],
	helpOpen: [
		"Открываю справку... Там много полезного!",
		"Справка загружается. Изучи возможности симулятора.",
		"Руководство пользователя открыто.",
		"Смотри справку, чтобы узнать больше."
	],

	// --- Редактор Кода ---
	codeCleared: [
		"Редактор кода очищен. Готов к новым командам!",
		"Код стерт. Можно писать с чистого листа.",
		"Поле для кода теперь пустое."
	],
	executionStartRequest: [
		"Запускаю выполнение кода...",
		"Отправляю код на сервер...",
		"Начинаю интерпретацию команд...",
		"Робот готовится выполнять код..."
	],
	executionStoppedByUser: [
		"Выполнение остановлено по твоей команде.",
		"Программа прервана.",
		"Стоп! Робот остановился.",
		"Остановка выполнения."
	],
	executionFinishedSuccess: [
		"Код выполнен успешно! Робот завершил работу.",
		"Программа выполнена без ошибок.",
		"Готово! Все команды выполнены.",
		"Успех! Робот на месте назначения.",
		"Выполнение завершено."
	],
	executionFinishedError: [ // Добавляется сообщение об ошибке
		"Ошибка при выполнении кода:",
		"Выполнение прервано из-за ошибки:",
		"Произошла ошибка:",
		"Робот столкнулся с проблемой:",
		"Не удалось выполнить код:"
	],
	inputRequired: [ // Добавляется имя переменной
		"Требуется ввод данных для переменной",
		"Программа ждет твоего ввода для",
		"Введи значение для",
		"Ожидание ввода для"
	],
	inputCancelled: [
		"Ввод отменен. Выполнение прервано.",
		"Ты отменил ввод. Программа остановлена.",
		"Отмена ввода. Запусти код снова, если нужно.",
	],
	inputReceivedNeedsRestart: [ // Добавляется значение и имя переменной
		"Значение принято. Чтобы продолжить, запусти код еще раз.",
		"Ввод сохранен. Перезапусти выполнение.",
		"Данные получены. Нажми 'Старт' для продолжения.",
	],
	networkError: [ // Добавляется сообщение об ошибке
		"Ошибка сети:",
		"Не удалось связаться с сервером:",
		"Проблема с подключением:",
		"Сетевая ошибка:"
	],
	serverError: [ // Добавляется сообщение об ошибке
		"Ошибка на сервере:",
		"Внутренняя ошибка сервера:",
		"Сервер сообщил об ошибке:",
	],

	// --- Движение Робота (Панель Управления) ---
	moveRobotUp: [
		"Робот шагнул вверх. Клетка свободна.",
		"Движение вверх успешно.",
		"Робот переместился на клетку выше."
	],
	moveRobotDown: [
		"Робот шагнул вниз. Путь свободен.",
		"Движение вниз успешно.",
		"Робот переместился на клетку ниже."
	],
	moveRobotLeft: [
		"Робот шагнул влево. Препятствий нет.",
		"Движение влево успешно.",
		"Робот переместился на клетку левее."
	],
	moveRobotRight: [
		"Робот шагнул вправо. Можно идти дальше.",
		"Движение вправо успешно.",
		"Робот переместился на клетку правее."
	],
	moveRobotUpBlocked: [
		"Вверх нельзя! Там стена или край поля.",
		"Путь вверх заблокирован.",
		"Робот уперся в препятствие сверху."
	],
	moveRobotDownBlocked: [
		"Вниз нельзя! Стена или граница поля.",
		"Путь вниз заблокирован.",
		"Робот уперся в препятствие снизу."
	],
	moveRobotLeftBlocked: [
		"Влево нельзя! Преграда на пути.",
		"Путь влево заблокирован.",
		"Робот уперся в препятствие слева."
	],
	moveRobotRightBlocked: [
		"Вправо нельзя! Стена мешает.",
		"Путь вправо заблокирован.",
		"Робот уперся в препятствие справа."
	],

	// --- Маркеры (Панель Управления) ---
	putMarker: [
		"Маркер поставлен в текущей клетке.",
		"Белый кружок появился под роботом.",
		"Ты оставил отметку."
	],
	pickMarker: [
		"Маркер убран из-под робота.",
		"Ты подобрал маркер.",
		"Клетка теперь без маркера."
	],
	markerAlreadyExists: [
		"Здесь уже есть маркер!",
		"В этой клетке уже лежит метка.",
		"Нельзя поставить второй маркер сюда."
	],
	noMarkerHere: [
		"Здесь нет маркера, чтобы его убрать.",
		"Под роботом пусто, нет маркеров.",
		"Нечего подбирать."
	],

	// --- Клетки (Панель Управления) ---
	paintCell: [
		"Клетка под роботом закрашена серым.",
		"Ты покрасил клетку.",
		"Теперь эта клетка закрашена."
	],
	clearCell: [
		"Краска стерта с клетки под роботом.",
		"Ты очистил клетку.",
		"Клетка снова обычная."
	],
	cellAlreadyPainted: [
		"Эта клетка уже закрашена.",
		"Здесь и так серо!",
		"Красить второй раз не нужно."
	],
	cellAlreadyClear: [
		"Эта клетка и так чистая.",
		"Здесь нечего стирать.",
		"Клетка уже не закрашена."
	],

	// --- Режим Редактирования ---
	enterEditMode: [
		"Режим рисования ВКЛЮЧЕН. Кликай по полю!",
		"Теперь можно рисовать стены (ЛКМ у края), красить клетки (ЛКМ в центре) и ставить маркеры (ПКМ).",
		"Ты вошел в режим редактора. Изменяй поле мышкой.",
		"Рисуй стены и ставь метки! Нажми кнопку снова, чтобы выйти.",
	],
	exitEditMode: [
		"Режим рисования ВЫКЛЮЧЕН. Теперь роботом можно управлять.",
		"Выход из редактора. Клики по полю больше ничего не меняют.",
		"Редактирование завершено.",
		"Обычный режим управления роботом.",
	],
	editModeRequired: [
		"Сначала включи 'Режим ред.', чтобы изменять поле.",
		"Это действие доступно только в режиме редактирования.",
		"Нажми 'Вкл Ред.' для изменения поля."
	],

	// --- Размеры Поля (Панель Управления) ---
	increaseWidth: ["Поле стало шире.", "Добавлена колонка справа."],
	decreaseWidth: ["Поле стало уже.", "Убрана колонка справа."],
	increaseHeight: ["Поле стало выше.", "Добавлена строка снизу."],
	decreaseHeight: ["Поле стало ниже.", "Убрана строка снизу."],
	widthCannotBeLessThan1: ["Ширина поля не может быть меньше 1 клетки!", "Минимальная ширина достигнута."],
	heightCannotBeLessThan1: ["Высота поля не может быть меньше 1 клетки!", "Минимальная высота достигнута."],

	// --- Взаимодействие с Полем (Canvas) ---
	canvasLeftClickEditModeWallAdd: ["Стена добавлена!", "Нарисовал стену."],
	canvasLeftClickEditModeWallRemove: ["Стена убрана.", "Стер стену."],
	canvasLeftClickEditModeCellPaint: ["Клетка закрашена.", "Покрасил клетку."],
	canvasLeftClickEditModeCellClear: ["Клетка очищена.", "Стер краску."],
	canvasLeftClickEditModePermanentWall: ["Это граница поля, ее нельзя изменить!", "Границы поля нерушимы."],
	canvasRightClickEditModeMarkerAdd: ["Маркер поставлен.", "Добавил метку."],
	canvasRightClickEditModeMarkerRemove: ["Маркер убран.", "Стер метку."],
	canvasLeftClickNoEdit: ["Чтобы рисовать или красить, включи 'Режим ред.'", "Левый клик сейчас не работает. Нужен режим редактора."],
	canvasRightClickNoEdit: ["Чтобы ставить маркеры, включи 'Режим ред.'", "Правый клик сейчас не работает. Нужен режим редактора."],
	robotDragStart: ["Начал перетаскивать робота...", "Тащим робота..."],
	robotDragEnd: [ // Добавляется позиция
		"Робот перемещен в клетку",
		"Новая позиция робота:",
		"Робот теперь здесь:"
	],

	// --- Масштабирование (Canvas) ---
	wheelZoomIn: ["Масштаб увеличен.", "Приблизил поле."],
	wheelZoomOut: ["Масштаб уменьшен.", "Отдалил поле."],
	zoomMinReached: ["Достигнут минимальный масштаб.", "Меньше сделать нельзя."],
	zoomMaxReached: ["Достигнут максимальный масштаб.", "Больше сделать нельзя."],

	// --- Импорт Файла ---
	importTrigger: ["Выбери файл .fil для загрузки обстановки...", "Ожидание выбора файла..."],
	importSuccess: [ // Добавляется имя файла
		"Обстановка загружена из файла",
		"Поле обновлено из",
		"Импорт успешен:"
	],
	importErrorRead: [ // Добавляется имя файла
		"Не удалось прочитать файл",
		"Ошибка чтения файла",
	],
	importErrorParse: [ // Добавляется имя файла и ошибка
		"Ошибка разбора файла",
		"Неверный формат файла",
	],
	importErrorGeneral: [ // Добавляется имя файла и ошибка
		"Ошибка при импорте файла",
		"Не удалось загрузить",
	]
};

// Хранит последнюю использованную подсказку для каждого действия
const lastUsedHints = {};

/**
 * Возвращает случайную подсказку для заданного действия, избегая повторения последней.
 * @param {string} action Ключ действия из объекта HINTS.
 * @param {boolean} [editMode=false] Текущий режим редактирования (для контекстных подсказок).
 * @returns {string} Текст подсказки.
 */
export function getHint(action, editMode = false) {
	// Находим массив подсказок для данного действия
	const hintsArray = HINTS[action];

	// Если действие не найдено или массив пуст, возвращаем пустую строку
	if (!hintsArray || hintsArray.length === 0) {
		console.warn(`Hint action "${action}" not found or has no hints.`);
		return "";
	}

	// Если только один вариант, возвращаем его
	if (hintsArray.length === 1) {
		return hintsArray[0];
	}

	// Получаем последнюю использованную подсказку для этого действия
	const lastUsed = lastUsedHints[action] || null;
	let randomIndex;
	let selectedHint;

	// Пытаемся выбрать другую подсказку (до 5 попыток, чтобы избежать вечного цикла)
	for (let i = 0; i < 5; i++) {
		randomIndex = Math.floor(Math.random() * hintsArray.length);
		selectedHint = hintsArray[randomIndex];
		if (selectedHint !== lastUsed) {
			break; // Нашли другую подсказку
		}
		// Если не нашли, selectedHint останется равным последней выбранной
	}

	// Сохраняем выбранную подсказку как последнюю использованную
	lastUsedHints[action] = selectedHint;
	return selectedHint;
}

// FILE END: hints.js