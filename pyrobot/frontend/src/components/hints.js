/**
 * hints.js
 *
 * В этом файле хранится объект HINTS, в котором для каждого ключа (действия)
 * есть несколько вариантов подсказок (строк). При каждом вызове функции getHint(action, editMode)
 * выбирается случайная строка, отличная от последней, чтобы не повторяться подряд.
 *
 * Экспортируем:
 *  - HINTS: объект с массивами строк
 *  - getHint(action, editMode): функция, возвращающая одну из строк HINTS[action].
 */

export const HINTS = {
	initial: ["Добро пожаловать в симулятор! Используйте кнопки справа, чтобы управлять роботом.", "Стартуем! Справа — панель управления: двигайте робота, рисуйте стены и ставьте маркеры.", "Привет! Для перемещения робота и редактирования поля нажимайте соответствующие кнопки справа.", "Вы в игре! Чтобы начать, двигайте робота или войдите в режим редактирования (панель справа).", "Здравствуйте! Это поле управления: кнопки находятся справа, а здесь — ваше игровое пространство.", "Симулятор запущен! Попробуйте покликать на стрелки или войти в режим редактирования (панель справа)."],

	// Движение робота
	moveRobotUp: ["Робот переместился вверх на одну клетку. Проверяем, нет ли там стены!", "Осторожно: робот двигается вверх. Надеемся, путь чист.", "Вы указали движение вверх — робот сделал шаг выше.", "Движение вверх выполнено. Следите, чтобы сверху не было препятствий!", "Робот смело пошёл на север. Если там была стена, он бы не двинулся.", "Робот смотрит вперёд и двигается вверх, на новую клетку."],
	moveRobotDown: ["Робот идёт вниз. Проверьте, не упирается ли он в стену снизу!", "Движение вниз: робот сделал шаг к югу.", "Вы нажали вниз, робот переместился на одну клетку ниже.", "Робот двигается вниз по клеткам, стараясь обойти стены.", "Выполнено движение вниз. Надеемся, путь был свободен!", "Робот шагнул на юг — если была стена, он остался бы на месте."],
	moveRobotLeft: ["Робот двинулся влево. Слева может быть стена или граница.", "Движение влево успешно: робот на новой клетке слева.", "Робот прошёл на одну клетку левее. Надеемся, там не было преград.", "Робот поехал на запад. Если слева была стена, движение не произошло бы.", "Команда «влево» принята. Следите за стенами, чтобы не застрять!", "Робот спокойно переместился на одну клетку левее."],
	moveRobotRight: ["Робот двинулся вправо. Справа могла быть стена или край поля!", "Движение вправо: робот шагнул на одну клетку направо.", "Робот отправился на восток, надеемся, путь был свободен.", "Команда «вправо» выполнена — если стена отсутствовала.", "Робот сместился вправо, теперь занимает новую клетку.", "Нажата кнопка «→». Робот сделал шаг к востоку."],

	// Маркеры
	putMarker: ["Вы поставили маркер в клетку, где сейчас робот.", "Маркер добавлен: теперь в этой клетке есть отметка.", "На текущей клетке робота появился белый кружок-маркер.", "Отлично! Маркер установлен там, где стоит робот.", "Добавлен маркер под роботом. Можно поднять его кнопкой «Поднять маркер».", "Маркер поставлен — маленький белый кружочек в позиции робота."],
	pickMarker: ["Вы подняли маркер. Клетка теперь без маркера.", "Маркер удалён — видимо, он вам пригодится.", "Забрали маркер с текущей клетки робота.", "Маркер, который лежал под роботом, исчез.", "Вы успешно сняли маркер. Теперь робот в чистой клетке.", "Маркер поднят, чтобы можно было переместить его в другое место."],

	// Покраска ячейки
	paintCell: ["Вы закрасили клетку под роботом серым цветом.", "Клетка покрашена! Теперь она выделяется из остальных.", "Клетка, где стоит робот, стала закрашенной.", "Ячейка под роботом приобрела серый оттенок.", "Покраска удалась. Если захотите, её можно очистить.", "Клетка успешно закрашена под ногами робота."],
	clearCell: ["Вы стёрли краску с клетки под роботом — она снова обычная.", "Клетка очистилась и вернулась в исходный вид.", "Очистка выполнена: закраска снята с клетки.", "Вы убрали цвет с текущей клетки робота.", "Теперь клетка под роботом снова не закрашена.", "Краска удалена — клетка возвращена в неизменённое состояние."],

	// Режим редактирования
	enterEditMode: ["Режим редактирования включён. Вы можете ставить стены и маркеры.", "Вы вошли в режим редактирования: клики по границам клеток — стены, правый клик — маркер.", "Edit Mode: отныне можно рисовать стены, красить клетки и ставить маркеры по клику.", "Режим редактирования активирован. Будьте осторожны: клик может поставить стену!", "Внимание! Теперь вы в режиме редактирования, можно редактировать поле мышкой.", "Edit Mode: используйте левый клик для стен/покраски, правый клик для маркеров."],
	exitEditMode: ["Режим редактирования отключён. Робот снова свободно перемещается.", "Вы вышли из Edit Mode — теперь клики по полю не ставят стены и маркеры.", "Редактирование завершено, стен и раскраски по клику больше не будет.", "Режим редактирования выключен. Нажмите 'Включить Режим рисования', чтобы вернуться к правкам.", "Edit Mode покинут. Все клики мышью теперь не будут изменять поле.", "Режим редактирования теперь неактивен. Робот двигается без случайных помех."],

	// Изменение размеров поля
	increaseWidth: ["Вы увеличили ширину поля на одну клетку. Возможно, стоит достроить стены по краям?", "Ширина поля +1. Теперь у робота ещё больше простора для движения!", "Поле стало шире: количество клеток по горизонтали возросло.", "Вы расширили поле вправо. Проверьте, где теперь граница.", "Ширина поля выросла — можно добавить стену на новом краю.", "Поле стало чуть просторнее по горизонтали!"],
	decreaseWidth: ["Вы уменьшили ширину поля. Если робот был за краем, он сдвинется к границе.", "Минус одна клетка по ширине. Проверьте, что ничего важного не отрезано.", "Ширина поля сокращена: поле сузилось. Возможно, стены тоже изменились.", "Поле стало уже. Робот по-прежнему в допустимых координатах?", "Ширина уменьшена — внимательно посмотрите, где теперь робот.", "Поле съёжилось, но функционал остался прежним!"],
	increaseHeight: ["Поле выросло в высоту на одну клетку. Новые места для исследования!", "Теперь высота на одну клетку больше. Можно добавить стену снизу/сверху.", "Вы увеличили поле по вертикали. Следите, чтоб робот мог ходить по новым клеткам.", "Высота поля +1. Робот пока не видит границу, но можно установить стену.", "Поле стало выше: есть где развернуться!", "Ещё одна клетка сверху (или снизу) добавлена к полю."],
	decreaseHeight: ["Высота поля уменьшена. Если робот был за пределами, он вернётся в доступную область.", "Минус одна клетка по высоте. Поле стало компактнее.", "Вы «срезали» поле сверху или снизу. Надеемся, робот не был там!", "Поле сузилось по вертикали: теперь клеток меньше.", "Высота поля сократилась, аккуратнее с роботами и стенами.", "Снизу/сверху отрезана лишняя строка — поле теперь меньше по высоте."],

	// Действия с холстом (Canvas)
	canvasLeftClickEditMode: ["Левый клик в режиме редактирования. Попадание на границу — стена, в центр — покраска.", "В режиме редактирования левый клик — или нарисовать стену, или раскрасить клетку.", "Вы кликнули слева, редактируя поле: граница клетки = стена, иначе — покраска.", "Левый щелчок: стена, если рядом с краем, покраска, если внутри клетки.", "В Edit Mode левый клик может преобразовать поле: стены или покраска.", "Редактирование: левый клик — основной способ ставить стены или красить ячейки."],
	canvasRightClickEditMode: ["Правый клик в режиме редактирования: поставить или убрать маркер.", "В Edit Mode правый клик по клетке — это маркер.", "Вы нажали правую кнопку. Если попали в клетку, маркер добавлен/убран.", "Правый щелчок = маркер: легко поставить и снять.", "Редактирование: правый клик — управление маркерами в клетках.", "Используя правую кнопку, можно пометить любую клетку маркером."],
	canvasLeftClickNoEdit: ["Вы кликнули левой кнопкой, но режим редактирования выключен. Ничего не изменилось.", "Вне режима редактирования левый клик не действует на поле.", "Левый клик без Edit Mode не приносит результатов: попробуйте включить редактирование.", "Выключен Edit Mode — левая кнопка мыши не изменяет поле.", "Нажат левый клик, но редактирование не активно, так что нет эффекта.", "Без Edit Mode поле не меняется от левого щелчка."],
	canvasRightClickNoEdit: ["Правый клик без Edit Mode: никакого действия не произойдёт.", "Ничего не случилось, так как вы не в режиме редактирования.", "Вне редактирования правый клик не ставит маркер.", "Режим редактирования отключён — правый клик по полю не работает.", "Вы нажали правую кнопку, но без Edit Mode маркер не поставить.", "Без Edit Mode правый клик не даёт результата."],

	// Прокрутка колёсиком
	wheelZoomIn: ["Вы приблизили поле (увеличили размер клеток).", "Масштаб вырос: клетки стали крупнее.", "Размер ячеек увеличен. Изучать поле стало проще, но меньше влезает на экран.", "Зум приближения: клетки стали больше, детали виднее!", "Увеличение клеток: теперь каждая клетка заметно крупнее.", "Вы подкрутили колёсико, и поле 'приблизилось'."],
	wheelZoomOut: ["Вы отдалили поле (уменьшили размер клеток).", "Масштаб уменьшен: клетки стали мельче, но поле умещается лучше.", "Зум удаления: теперь видно большее пространство, но клетки меньше.", "Сделали клетки меньше: поле кажется просторным!", "Уменьшение клеток: робот и стены всё ещё видны, но масштабы другие.", "Вы прокрутили колёсико, уменьшив масштаб поля."],

	// Дополнительные подсказки для ControlPanel
	moveRobotUpBlocked: ["Робот не может пойти вверх: стена или край поля.", "Движение вверх заблокировано — роботу препятствует стена или граница.", "Невозможно двигаться вверх: присутствует стена или достигнута граница.", "Робот столкнулся с препятствием при попытке двигаться вверх.", "Вверх нельзя: стена или граница поля ограничивают движение робота.", "Робот не может переместиться вверх из-за стены или края поля."],
	moveRobotDownBlocked: ["Робот не может пойти вниз: стена или край поля.", "Движение вниз заблокировано — роботу препятствует стена или граница.", "Невозможно двигаться вниз: присутствует стена или достигнута граница.", "Робот столкнулся с препятствием при попытке двигаться вниз.", "Вниз нельзя: стена или граница поля ограничивают движение робота.", "Робот не может переместиться вниз из-за стены или края поля."],
	moveRobotLeftBlocked: ["Робот не может пойти влево: стена или край поля.", "Движение влево заблокировано — роботу препятствует стена или граница.", "Невозможно двигаться влево: присутствует стена или достигнута граница.", "Робот столкнулся с препятствием при попытке двигаться влево.", "Влево нельзя: стена или граница поля ограничивают движение робота.", "Робот не может переместиться влево из-за стены или края поля."],
	moveRobotRightBlocked: ["Робот не может пойти вправо: стена или край поля.", "Движение вправо заблокировано — роботу препятствует стена или граница.", "Невозможно двигаться вправо: присутствует стена или достигнута граница.", "Робот столкнулся с препятствием при попытке двигаться вправо.", "Вправо нельзя: стена или граница поля ограничивают движение робота.", "Робот не может переместиться вправо из-за стены или края поля."],
	markerAlreadyExists: ["Здесь уже лежит маркер.", "На этой клетке уже установлен маркер.", "Маркер уже присутствует в текущей позиции робота.", "Нельзя поставить маркер — маркер уже здесь.", "Маркер уже установлен в этой клетке.", "На этой позиции робота уже есть маркер."],
	noMarkerHere: ["Здесь нет маркера.", "В этой клетке отсутствует маркер.", "Маркер отсутствует в текущей позиции робота.", "Нельзя поднять маркер — его здесь нет.", "На этой клетке нет установленного маркера.", "Маркер не найден в текущей позиции робота."],
	cellAlreadyPainted: ["Клетка уже покрашена.", "Эта клетка уже закрашена.", "На этой клетке уже присутствует цвет.", "Нельзя покрасить: клетка уже закрашена.", "Клетка под роботом уже имеет цвет.", "Эта позиция уже закрашена."],
	cellAlreadyClear: ["Эта клетка и так не была покрашена.", "Клетка уже очищена.", "На этой клетке нет цвета для удаления.", "Нельзя очистить: клетка уже чистая.", "Клетка под роботом уже не закрашена.", "Эта позиция уже очищена."],
	editModeRequired: ["Включите режим редактирования для изменения поля.", "Необходимо активировать режим редактирования для выполнения этого действия.", "Редактирование отключено — включите режим редактирования.", "Для изменения поля требуется включить режим редактирования.", "Активируйте Edit Mode, чтобы выполнить это действие.", "Режим редактирования не активен — включите его для изменения поля."],
	widthCannotBeLessThan1: ["Ширина не может быть меньше 1.", "Минимальная ширина поля — 1 клетка.", "Нельзя уменьшить ширину до менее чем 1 клетка.", "Ширина поля должна быть как минимум 1 клетка.", "Минимальное ограничение: ширина поля — 1 клетка.", "Ширина не может быть меньше 1, оставьте как минимум одну клетку."],
	heightCannotBeLessThan1: ["Высота не может быть меньше 1.", "Минимальная высота поля — 1 клетка.", "Нельзя уменьшить высоту до менее чем 1 клетка.", "Высота поля должна быть как минимум 1 клетка.", "Минимальное ограничение: высота поля — 1 клетка.", "Высота не может быть меньше 1, оставьте как минимум одну клетку."],
	importSuccess: ["Обстановка импортирована успешно!", "Импорт прошёл успешно. Поле обновлено.", "Файл импортирован без ошибок.", "Данные успешно загружены и применены.", "Импорт завершён: поле обновлено.", "Файл успешно импортирован."],
	importError: ["Ошибка импорта: ", "Не удалось импортировать файл: ", "Произошла ошибка при импорте: ", "Импорт не удался: ", "Ошибка при загрузке файла: ", "Не удалось обработать файл: "],
	parseError: ["Ошибка парсинга .fil: ", "Не удалось распарсить файл: ", "Произошла ошибка при разборе файла: ", "Парсинг файла не удался: ", "Ошибка при обработке содержимого файла: ", "Не удалось прочитать данные из файла: "],
	help: ["Используйте кнопки слева для управления роботом и редактирования поля.", "Кнопки управления позволяют двигать робота, ставить маркеры и изменять размеры поля.", "Включите режим редактирования, чтобы рисовать стены и красить клетки.", "Для перемещения робота используйте кнопки Вверх, Вниз, Влево, Вправо.", "Положить или поднять маркер можно с помощью соответствующих кнопок.", "Изменяйте размеры поля кнопками «Поле шире/уже» и «Поле выше/ниже»."],
};

const lastUsedHints = {};

export function getHint(action, editMode = false) {
	if (!HINTS[action] || HINTS[action].length === 0) {
		return "";
	}

	const hintsArray = HINTS[action];
	// Если только один вариант
	if (hintsArray.length === 1) {
		return hintsArray[0];
	}

	let randomIndex = Math.floor(Math.random() * hintsArray.length);
	const lastUsed = lastUsedHints[action] || null;

	if (hintsArray.length === 2) {
		// Всего 2 варианта, просто избегаем повтор
		while (hintsArray[randomIndex] === lastUsed) {
			randomIndex = (randomIndex + 1) % 2;
		}
	} else {
		// Если вариантов больше, крутим, пока не найдём отличную строку
		while (hintsArray[randomIndex] === lastUsed) {
			randomIndex = Math.floor(Math.random() * hintsArray.length);
		}
	}

	const selectedHint = hintsArray[randomIndex];
	lastUsedHints[action] = selectedHint;
	return selectedHint;
}
