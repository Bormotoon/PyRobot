#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä –∏–∑ —Ñ–∞–π–ª–∞ –ö—É–ú–∏—Ä
"""

from antlr4 import InputStream, CommonTokenStream
from pyrobot.backend.kumir_interpreter.generated.KumirLexer import KumirLexer
from pyrobot.backend.kumir_interpreter.generated.KumirParser import KumirParser
from pyrobot.backend.kumir_interpreter.interpreter_components.main_visitor import KumirInterpreterVisitor

def test_parse_functions_file():
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏...")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º –ö—É–ú–∏—Ä
    with open("test_functions.kum", "r", encoding="utf-8") as f:
        code = f.read()
    
    print(f"üìÑ –ö–æ–¥ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞:\n{code}")
    
    # –°–æ–∑–¥–∞–µ–º –ª–µ–∫—Å–µ—Ä –∏ –ø–∞—Ä—Å–µ—Ä
    input_stream = InputStream(code)
    lexer = KumirLexer(input_stream)
    token_stream = CommonTokenStream(lexer)
    parser = KumirParser(token_stream)
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    tree = parser.program()
      # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
    with open("test_functions.kum", "r", encoding="utf-8") as f:
        program_lines = f.readlines()
    
    interpreter = KumirInterpreterVisitor(program_lines=program_lines)
    
    print("üîç –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ (—Å–±–æ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π)...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ –¥–ª—è —Å–±–æ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π (–±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–ª –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤)
    try:
        interpreter.collect_definitions_only(tree)
        print("‚úÖ –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        all_algorithms = interpreter.algorithm_manager.get_all_algorithms()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤: {len(all_algorithms)}")
        
        for algo in all_algorithms:
            print(f"   - {algo.name} ({'—Ñ—É–Ω–∫—Ü–∏—è' if algo.is_function else '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞'})")
            if algo.parameters:
                for param in algo.parameters:
                    print(f"     * {param.name}: {param.param_type} ({param.mode})")
            if algo.return_type:
                print(f"     ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {algo.return_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        suma_func = interpreter.algorithm_manager.get_algorithm("—Å—É–º–º–∞")
        if suma_func:
            print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è '—Å—É–º–º–∞' –Ω–∞–π–¥–µ–Ω–∞: {suma_func.is_function}")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {len(suma_func.parameters)}")
            print(f"   –¢–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞: {suma_func.return_type}")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è '—Å—É–º–º–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        output_proc = interpreter.algorithm_manager.get_algorithm("–≤—ã–≤–µ—Å—Ç–∏_—Å—É–º–º—É")
        if output_proc:
            print(f"‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ '–≤—ã–≤–µ—Å—Ç–∏_—Å—É–º–º—É' –Ω–∞–π–¥–µ–Ω–∞: {output_proc.is_procedure}")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {len(output_proc.parameters)}")
        else:
            print("‚ùå –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ '–≤—ã–≤–µ—Å—Ç–∏_—Å—É–º–º—É' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ: {e}")
        import traceback
        traceback.print_exc()
    
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_parse_functions_file()
