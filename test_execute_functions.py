"""
–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ö—É–ú–∏—Ä–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, project_root)

from pyrobot.backend.kumir_interpreter.runtime_utils import interpret_kumir
from pyrobot.backend.kumir_interpreter.interpreter_components.main_visitor import KumirInterpreterVisitor
from pyrobot.backend.kumir_interpreter.generated.KumirLexer import KumirLexer
from pyrobot.backend.kumir_interpreter.generated.KumirParser import KumirParser
from antlr4 import InputStream, CommonTokenStream

def test_simple_function_execution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ö—É–ú–∏—Ä–∞."""
      # –ü—Ä–æ—Å—Ç–æ–π –∫–æ–¥ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∏ –µ—ë –≤—ã–∑–æ–≤–æ–º
    code = """–∞–ª–≥ —Ü–µ–ª —Å—É–º–º–∞(–∞—Ä–≥ —Ü–µ–ª x, –∞—Ä–≥ —Ü–µ–ª y)
–Ω–∞—á
  –∑–Ω–∞—á := x + y
–∫–æ–Ω

–∞–ª–≥ –≥–ª–∞–≤–Ω—ã–π
–Ω–∞—á
  –≤—ã–≤–æ–¥ —Å—É–º–º–∞(2, 3)
–∫–æ–Ω"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...")
    print(f"üìÑ –ö–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{code}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º runtime_utils –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é...")
        result = interpret_kumir(code)
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Å –ø—Ä—è–º—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º visitor –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å visitor...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        input_stream = InputStream(code)
        lexer = KumirLexer(input_stream)
        token_stream = CommonTokenStream(lexer)
        parser = KumirParser(token_stream)
        tree = parser.program()
        
        # –°–æ–∑–¥–∞–µ–º visitor
        visitor = KumirInterpreterVisitor()
        
        # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - —Å–±–æ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        print("ÔøΩ –°–æ–±–∏—Ä–∞—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...")
        visitor.collect_definitions_only(tree)
        print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
        print(f"üìù –§—É–Ω–∫—Ü–∏—è '—Å—É–º–º–∞' –Ω–∞–π–¥–µ–Ω–∞: {visitor.algorithm_manager.has_algorithm('—Å—É–º–º–∞')}")
        if visitor.algorithm_manager.has_algorithm('—Å—É–º–º–∞'):
            algo_def = visitor.algorithm_manager.get_algorithm('—Å—É–º–º–∞')
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {len(algo_def.parameters)}")
            print(f"   –¢–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞: {algo_def.return_type}")
            for param in algo_def.parameters:
                print(f"   * {param.name}: {param.param_type} ({param.mode})")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return True

if __name__ == "__main__":
    test_simple_function_execution()
