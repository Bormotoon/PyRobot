#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import re
from pathlib import Path

def analyze_signature_problems():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö."""
    solutions_dir = Path("kumir_python_solutions/python_solutions")
    
    problems = []
    
    for py_file in solutions_dir.glob("*.py"):
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            func_match = re.search(r'def (\w+)\((.*?)\):', content)
            if not func_match:
                continue
                
            func_name = func_match.group(1)
            func_params = func_match.group(2).strip()
            func_params_list = [p.strip().split(':')[0].strip() for p in func_params.split(',') if p.strip()]
            
            # –ù–∞–π—Ç–∏ –≤—Å–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
            test_calls = re.findall(rf'{func_name}\((.*?)\)', content)
            
            # –ù–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            original_match = re.search(r'Original: (.+)', content)
            original = original_match.group(1) if original_match else ""
            
            # –ù–∞–π—Ç–∏ –≤—ã–∑–æ–≤—ã –≤ test_solution
            test_func_match = re.search(r'def test_solution.*?\n(.*?)(?=def|\Z)', content, re.DOTALL)
            if test_func_match:
                test_content = test_func_match.group(1)
                test_calls_in_test = re.findall(rf'{func_name}\((.*?)\)', test_content)
            else:
                test_calls_in_test = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            problem_found = False
            problem_desc = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—ã–∑–æ–≤–æ–≤
            for call_params in test_calls_in_test:
                call_params_clean = call_params.strip()
                if call_params_clean:
                    call_params_list = [p.strip() for p in call_params_clean.split(',') if p.strip()]
                else:
                    call_params_list = []
                
                if len(func_params_list) != len(call_params_list):
                    problem_found = True
                    problem_desc.append(f"–°–∏–≥–Ω–∞—Ç—É—Ä–∞: {len(func_params_list)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –≤—ã–∑–æ–≤: {len(call_params_list)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if 'A[' in content and 'A' not in func_params:
                problem_found = True
                problem_desc.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç A[], –Ω–æ A –Ω–µ—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
            
            if 'X' in content and 'X' not in func_params and 'x' not in func_params:
                problem_found = True
                problem_desc.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç X, –Ω–æ X –Ω–µ—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
            
            if 'N' in content and 'N' not in func_params and 'n' not in func_params:
                problem_found = True
                problem_desc.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç N, –Ω–æ N –Ω–µ—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
            
            if problem_found:
                problems.append({
                    'file': py_file.name,
                    'original': original,
                    'func_signature': f"{func_name}({func_params})",
                    'problems': problem_desc
                })
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {py_file}: {e}")
    
    return problems

def main():
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 60)
    
    problems = analyze_signature_problems()
    
    if not problems:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(problems)} —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:\n")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
    by_type = {}
    for problem in problems:
        for prob_desc in problem['problems']:
            if prob_desc not in by_type:
                by_type[prob_desc] = []
            by_type[prob_desc].append(problem)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:")
    for prob_type, items in by_type.items():
        print(f"   {prob_type}: {len(items)} —Ñ–∞–π–ª–æ–≤")
    
    print(f"\nüîç –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º (–ø–µ—Ä–≤—ã–µ 15):")
    for i, problem in enumerate(problems[:15]):
        print(f"\n{i+1}. {problem['file']}")
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {problem['original']}")
        print(f"   –°–∏–≥–Ω–∞—Ç—É—Ä–∞: {problem['func_signature']}")
        for prob in problem['problems']:
            print(f"   ‚ùå {prob}")

if __name__ == '__main__':
    main()
