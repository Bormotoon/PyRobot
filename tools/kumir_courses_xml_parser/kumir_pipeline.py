#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ XML —Ñ–∞–π–ª–æ–≤ –ö–£–ú–ò–†–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è Python —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
1. –ü–∞—Ä—Å–∏—Ç XML —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏ –ö–£–ú–ò–†–∞
2. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—á–µ–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –∏ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞—á
3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
4. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
5. –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
"""

import xml.etree.ElementTree as ET
import json
import re
import os
import sys
import subprocess
import shutil
from typing import Optional, List, Dict, Any, Set
from pathlib import Path

class KumirToPythonPipeline:
    """–ü–æ–ª–Ω—ã–π pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ö–£–ú–ò–†–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è Python —Ä–µ—à–µ–Ω–∏–π."""
    
    def __init__(self, xml_file_path: str, output_dir: str = "kumir_python_solutions"):
        self.xml_file_path = xml_file_path
        self.output_dir = Path(output_dir)
        self.tasks_json_file = self.output_dir / "tasks_data.json"
        self.python_dir = self.output_dir / "python_solutions"
        self.reports_dir = self.output_dir / "reports"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.output_dir.mkdir(exist_ok=True)
        self.python_dir.mkdir(exist_ok=True)
        self.reports_dir.mkdir(exist_ok=True)
    
    def clean_task_name_for_filename(self, task_name: str, task_id: str, task_type: str = "") -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏."""
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        if task_type:
            if task_type.startswith('func_'):
                type_names = {
                    'func_last_digit': 'last_digit',
                    'func_tens_digit': 'tens_digit', 
                    'func_hundreds_digit': 'hundreds_digit',
                    'func_cube': 'cube',
                    'func_square': 'square',
                    'func_round': 'round',
                    'func_round_up': 'round_up',
                    'func_is_prime': 'is_prime',
                    'func_is_palindrome': 'is_palindrome',
                    'func_complex_algorithm': 'complex_func',
                    'func_generic': 'function'
                }
                return type_names.get(task_type, 'function')
            elif task_type.startswith('algorithm_'):
                type_names = {
                    'algorithm_binary_search': 'binary_search',
                    'algorithm_sort': 'sort_algorithm', 
                    'algorithm_complex': 'complex_algorithm'
                }
                return type_names.get(task_type, 'algorithm')
            elif task_type.startswith('array_'):
                type_names = {
                    'array_reverse': 'array_reverse',
                    'array_shift': 'array_shift',
                    'array_sort': 'array_sort',
                    'array_fill': 'array_fill',
                    'array_search': 'array_search',
                    'array_modify': 'array_modify',
                    'array_procedure': 'array_proc'
                }
                return type_names.get(task_type, 'array_task')
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        name_mappings = {
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
            "10": "arr_fill_zeros",
            "11": "arr_fill_natural", 
            "12": "arr_fill_from_x",
            "13": "arr_fill_plus5",
            "14": "arr_fill_fibonacci",
            "15": "arr_fill_powers2",
            "16": "arr_fill_pyramid",
            
            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤
            "20": "arr_inc_by1",
            "21": "arr_mult_by2", 
            "22": "arr_square",
            "23": "arr_inc_first_half",
            "24": "arr_div_middle",
            "25": "arr_mult_second_half",
            "26": "arr_average",
            
            # –ü–æ–∏—Å–∫ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
            "30": "arr_find_max",
            "31": "arr_find_min",
            "32": "arr_find_minmax",
            "33": "arr_find_min_index",
            "34": "arr_find_minmax_indices",
            "35": "arr_find_two_max",
            "36": "arr_find_two_min_indices",
            
            # –ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            "40": "arr_count_ones",
            "41": "arr_count_equal_x",
            "42": "arr_count_positive",
            "43": "arr_count_even_odd",
            "44": "arr_count_even_positive",
            "45": "arr_count_digit5",
            "46": "arr_count_same_digits",
            
            # –°—É–º–º—ã –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            "50": "arr_sum_all",
            "51": "arr_sum_negative",
            "52": "arr_sum_div3",
            "53": "arr_avg_less50",
            "54": "arr_prod_even_pos",
            "55": "arr_sum_tens_gt_units",
            "56": "arr_sum_all_same_digits",
            
            # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
            "60": "arr_find_x_index",
            "61": "arr_find_x_first_half",
            "62": "arr_find_x_second_half",
            "63": "arr_find_x_last_second_half",
            "64": "arr_count_x_first_half",
            "65": "arr_count_x_pairs",
            "66": "arr_count_hills",
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
            "71": "arr_count_same_digits",
            "72": "arr_longest_chain",
            "73": "arr_count_primes",
            "74": "arr_fill_primes",
            "75": "arr_sum_palindromes",
            "76": "arr_fill_hyperprimes"
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–∑ task_id
        return name_mappings.get(task_id, f"task_{task_id}")
    
    def parse_kumir_xml_to_json(self) -> bool:
        """–ü–∞—Ä—Å–∏—Ç XML —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ JSON."""
        print(f"üìÅ –ü–∞—Ä—Å–∏–Ω–≥ XML —Ñ–∞–π–ª–∞: {self.xml_file_path}")
        
        if not os.path.exists(self.xml_file_path):
            print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {self.xml_file_path}")
            return False

        all_tasks_data: List[Dict[str, Any]] = []
        processed_ids: Set[str] = set()

        try:
            tree = ET.parse(self.xml_file_path)
            root: ET.Element = tree.getroot()
        except ET.ParseError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
            return False

        elements_to_process = root.findall('.//USER_PRG') + root.findall('.//TESTED_PRG')

        for task_element in elements_to_process:
            test_id: Optional[str] = task_element.get('testId')
            prg_full_content: Optional[str] = task_element.get('prg')

            if not prg_full_content or not test_id or test_id in processed_ids:
                continue
            
            processed_ids.add(test_id)
            prg_full_content = prg_full_content.strip()

            # –û—Ç–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
            testing_separator = "–∞–ª–≥ —Ü–µ–ª @—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ|@hidden"
            student_program_part = prg_full_content.split(testing_separator, 1)[0].strip()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
            
            # 1. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            alg_match = re.search(r'–∞–ª–≥\s+(.+?)\s*\|\@protected', student_program_part, re.DOTALL)
            alg_name = alg_match.group(1).strip() if alg_match else ""
            
            # 2. –ë–ª–æ–∫ "–¥–∞–Ω–æ"
            dano_match = re.search(r'–¥–∞–Ω–æ\s*\|\s*(.+?)\s*\|\@protected', student_program_part, re.DOTALL)
            dano_content = dano_match.group(1).strip() if dano_match else ""
            dano_clean = re.sub(r'\s*\|\s*', ' ', dano_content)
            dano_clean = re.sub(r'\s+', ' ', dano_clean).strip()
            
            # 3. –ë–ª–æ–∫ "–Ω–∞–¥–æ"
            nado_start_match = re.search(r'–Ω–∞–¥–æ\s*\|', student_program_part)
            if nado_start_match:
                nado_start_pos = nado_start_match.start()
                nach_match = re.search(r'–Ω–∞—á\s*\|\@protected', student_program_part[nado_start_pos:])
                if nach_match:
                    nado_end_pos = nado_start_pos + nach_match.start()
                    nado_block = student_program_part[nado_start_pos:nado_end_pos].strip()
                    
                    nado_content = re.sub(r'–Ω–∞–¥–æ\s*\|\s*', '', nado_block)
                    nado_content = re.sub(r'\|\@protected', '', nado_content)
                    nado_content = re.sub(r'^\s*\|\s*', '', nado_content, flags=re.MULTILINE)
                    nado_clean = re.sub(r'\s+', ' ', nado_content).strip()
                else:
                    nado_clean = ""
            else:
                nado_clean = ""
            
            # 4. –£—á–µ–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–¥
            student_code = ""
            nach_match = re.search(r'–Ω–∞—á\s*\|\@protected', student_program_part)
            if nach_match:
                code_start_pos = nach_match.start()
                kon_match = re.search(r'–∫–æ–Ω\s*\|\@protected', student_program_part[code_start_pos:])
                if kon_match:
                    code_end_pos = code_start_pos + kon_match.end()
                    student_code_raw = student_program_part[code_start_pos:code_end_pos].strip()
                    
                    student_code = re.sub(r'\|\@protected', '', student_code_raw)
                    student_code = re.sub(r'^\s*\|\s*', '', student_code, flags=re.MULTILINE)
                    student_code = student_code.strip()

            task_data: Dict[str, str] = {
                "task_id": test_id,
                "task_name": alg_name,
                "task_init": dano_clean,
                "task_todo": nado_clean,
                "kumir_code": student_code
            }
            all_tasks_data.append(task_data)

        all_tasks_data.sort(key=lambda x: int(x['task_id']) if x['task_id'].isdigit() else 0)
        
        try:
            with open(self.tasks_json_file, 'w', encoding='utf-8') as f:
                json.dump(all_tasks_data, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(all_tasks_data)} –∑–∞–¥–∞—á –≤ {self.tasks_json_file}")
            return True
        except IOError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
            return False
    
    def detect_task_type(self, task: Dict[str, str]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ."""
        task_name = task['task_name'].lower()
        task_todo = task['task_todo'].lower()
        kumir_code = task['kumir_code'].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ
        has_array = any(keyword in task_name for keyword in ['–∞—Ä–≥—Ä–µ–∑', '—Ü–µ–ª—Ç–∞–±', '–≤–µ—â—Ç–∞–±', '–ª–æ—Ç—Ç–∞–±', '–º–∞—Å—Å–∏–≤'])
        
        # –°–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã (–¥–≤–æ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –∏ —Ç.–¥.)
        if any(keyword in task_todo for keyword in ['–¥–≤–æ–∏—á–Ω', '–±–∏–Ω–∞—Ä–Ω', '–ø–æ–∏—Å–∫', '—Å–æ—Ä—Ç–∏—Ä', '–ø—É–∑—ã—Ä', '–±—ã—Å—Ç—Ä', '—Å–ª–∏—è–Ω']):
            if '–¥–≤–æ–∏—á–Ω' in task_todo or '–±–∏–Ω–∞—Ä–Ω' in task_todo:
                return 'algorithm_binary_search'
            elif '—Å–æ—Ä—Ç–∏—Ä' in task_todo:
                return 'algorithm_sort'
            else:
                return 'algorithm_complex'
        
        # –ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏
        if has_array:
            if '—Ä–µ–≤–µ—Ä—Å' in task_name or '–æ–±—Ä–∞—Ç–Ω' in task_todo:
                return 'array_reverse'
            elif '—Ü–∏–∫–ª–∏—á–µ—Å–∫' in task_todo or '—Å–¥–≤–∏–≥' in task_todo:
                return 'array_shift'
            elif '—Å–æ—Ä—Ç–∏—Ä' in task_todo:
                return 'array_sort'
            elif '–∑–∞–ø–æ–ª–Ω' in task_todo:
                return 'array_fill'
            elif '–Ω–∞–π—Ç' in task_todo or '–ø–æ–∏—Å–∫' in task_todo:
                return 'array_search'
            elif '—É–¥–∞–ª' in task_todo or '–≤—Å—Ç–∞–≤–∫' in task_todo:
                return 'array_modify'
            else:
                return 'array_procedure'
        
        # –§—É–Ω–∫—Ü–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ)
        if any(prefix in task_name for prefix in ['—Ü–µ–ª ', '–≤–µ—â ']) and ('–∞—Ä–≥' in task_name or '(' in task_name):
            # –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if '–ø–æ—Å–ª–µ–¥–Ω' in task_name and '—Ü–∏—Ñ—Ä' in task_name:
                return 'func_last_digit'
            elif '–¥–µ—Å—è—Ç–∫' in task_name:
                return 'func_tens_digit'
            elif '—Å–æ—Ç–µ–Ω' in task_name:
                return 'func_hundreds_digit'
            elif '–∫—É–±' in task_name and not ('–ø–æ–∏—Å–∫' in task_todo or '–∫–æ—Ä–µ–Ω' in task_todo):
                return 'func_cube'
            elif '–∫–≤–∞–¥—Ä–∞—Ç' in task_name and not ('–ø–æ–∏—Å–∫' in task_todo or '–∫–æ—Ä–µ–Ω' in task_todo):
                return 'func_square'
            elif '–æ–∫—Ä—É–≥–ª' in task_name:
                if '–≤–≤–µ—Ä—Ö' in task_name:
                    return 'func_round_up'
                else:
                    return 'func_round'
            elif '–ø—Ä–æ—Å—Ç' in task_name:
                return 'func_is_prime'
            elif '–ø–∞–ª–∏–Ω–¥—Ä–æ–º' in task_name:
                return 'func_is_palindrome'
            # –°–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            elif any(keyword in task_todo for keyword in ['—à–∞–≥', '–ø–æ–∏—Å–∫', '–∫–æ—Ä–µ–Ω', '–∞–ª–≥–æ—Ä–∏—Ç–º']):
                return 'func_complex_algorithm'
            else:
                return 'func_generic'
        
        # –ú–∞—Å—Å–∏–≤—ã - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑ –∞—Ä–≥—Ä–µ–∑ –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ)
        if '–∑–∞–ø–æ–ª–Ω' in task_todo or '–∑–∞–ø–æ–ª–Ω' in task_name:
            if '–Ω—É–ª' in task_todo:
                return 'arr_fill_zeros'
            elif '–Ω–∞—Ç—É—Ä' in task_todo:
                return 'arr_fill_natural'
            elif '—Ñ–∏–±–æ' in task_todo:
                return 'arr_fill_fibonacci'
            elif '—Å—Ç–µ–ø–µ–Ω' in task_todo or '2^' in task_todo:
                return 'arr_fill_powers2'
            elif '–≥–æ—Ä–∫' in task_todo:
                return 'arr_fill_pyramid'
            else:
                return 'arr_fill_generic'
        
        # –ú–∞—Å—Å–∏–≤—ã - –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if '—É–≤–µ–ª–∏—á' in task_todo:
            return 'arr_modify_increase'
        elif '—É–º–Ω–æ–∂' in task_todo:
            return 'arr_modify_multiply'
        elif '–∫–≤–∞–¥—Ä–∞—Ç' in task_todo:
            return 'arr_modify_square'
        
        # –ú–∞—Å—Å–∏–≤—ã - –ø–æ–∏—Å–∫
        elif '–º–∞–∫—Å' in task_todo:
            return 'arr_find_max'
        elif '–º–∏–Ω' in task_todo:
            return 'arr_find_min'
        elif '–Ω–∞–π—Ç' in task_todo:
            return 'arr_find_value'
        
        # –ú–∞—Å—Å–∏–≤—ã - –ø–æ–¥—Å—á–µ—Ç
        elif '—Å–∫–æ–ª—å–∫' in task_todo or '–∫–æ–ª–∏—á–µ—Å—Ç' in task_todo:
            return 'arr_count'
        
        # –ú–∞—Å—Å–∏–≤—ã - —Å—É–º–º–∞
        elif '—Å—É–º–º' in task_todo:
            return 'arr_sum'
        
        # –°—Ç—Ä–æ–∫–∏
        elif '—Å—Ç—Ä–æ–∫' in task_name or '–ª–∏—Ç' in task_name:
            return 'string_task'
        
        # –†–æ–±–æ—Ç
        elif '—Ä–æ–±–æ—Ç' in task_name.lower():
            return 'robot_task'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 'generic_task'

    def generate_python_solution(self, task: Dict[str, str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python –∫–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        task_id = task['task_id']
        task_name = task['task_name']
        task_init = task['task_init']
        task_todo = task['task_todo']
        kumir_code = task['kumir_code']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        task_type = self.detect_task_type(task)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
        has_X = '–∞—Ä–≥ —Ü–µ–ª X' in task_name or '–∞—Ä–≥ –≤–µ—â X' in task_name or '(—Ü–µ–ª X)' in task_name or '(–≤–µ—â X)' in task_name
        returns_value = any(prefix in task_name for prefix in ['—Ü–µ–ª ', '–≤–µ—â ']) and ('–∞—Ä–≥' in task_name or '(' in task_name)
        is_function = task_type.startswith('func_')
        
        short_name = self.clean_task_name_for_filename(task_name, task_id, task_type)
        
        code_lines = [
            f'"""',
            f'Task {task_id}: {short_name}',
            f'',
            f'Original: {task_name}',
            f'Init: {task_init}',
            f'Todo: {task_todo}',
            f'',
            f'Kumir code:',
            f'{kumir_code}',
            f'"""',
            f'',
        ]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
        if task_type.startswith('func_'):
            # –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ
            if has_X:
                func_signature = f'def {short_name}(X):'
            else:
                func_signature = f'def {short_name}():'
        elif task_type.startswith('algorithm_') or task_type.startswith('array_'):
            # –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏
            if has_X:
                func_signature = f'def {short_name}(N, A, X):'
            else:
                func_signature = f'def {short_name}(N, A):'
        elif has_X and returns_value:
            func_signature = f'def {short_name}(N: int, A: list, X: int):'
        elif has_X:
            func_signature = f'def {short_name}(N: int, A: list, X: int) -> list:'
        elif returns_value:
            func_signature = f'def {short_name}(N: int, A: list):'
        else:
            func_signature = f'def {short_name}(N: int, A: list) -> list:'
        
        code_lines.append(func_signature)
        code_lines.append('    """Python solution for the task."""')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏–ø—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Å—Ç–∞—Ä—ã–º–∏ ID)
        if task_type == 'algorithm_binary_search':
            code_lines.extend([
                '    # Binary search algorithm',
                '    left, right = 1, min(N, 1000)',
                '    steps = 0',
                '    result = 0',
                '    ',
                '    while right >= left:',
                '        mid = (right + left) // 2',
                '        steps += 1',
                '        mid_cubed = mid * mid * mid',
                '        ',
                '        if N == mid_cubed:',
                '            result = mid',
                '            break',
                '        elif N < mid_cubed:',
                '            right = mid - 1',
                '        else:',
                '            left = mid + 1',
                '    ',
                '    return steps'
            ])
        elif task_type == 'array_reverse':
            code_lines.extend([
                '    # Reverse array elements',
                '    for i in range(N // 2):',
                '        A[i], A[N - 1 - i] = A[N - 1 - i], A[i]',
                '    return A'
            ])
        elif task_type == 'array_shift':
            code_lines.extend([
                '    # Cyclically shift array elements',
                '    if N > 1:',
                '        temp = A[N-1]',
                '        for i in range(N-1, 0, -1):',
                '            A[i] = A[i-1]',
                '        A[0] = temp',
                '    return A'
            ])
        elif task_type == 'array_sort':
            code_lines.extend([
                '    # Simple bubble sort',
                '    for i in range(N):',
                '        for j in range(N - 1 - i):',
                '            if A[j] > A[j + 1]:',
                '                A[j], A[j + 1] = A[j + 1], A[j]',
                '    return A'
            ])
        elif task_type == 'array_procedure':
            code_lines.extend([
                '    # Array procedure - implement based on task description',
                f'    # Task: {task_todo}',
                '    # TODO: Add specific implementation',
                '    return A'
            ])
        elif task_type == 'func_complex_algorithm':
            code_lines.extend([
                '    # Complex algorithmic function',
                f'    # Task: {task_todo}',
                '    # TODO: Implement complex algorithm',
                '    return 0  # Placeholder'
            ])
        # –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        elif task_type == 'func_last_digit':
            code_lines.extend([
                '    return X % 10'
            ])
        elif task_type == 'func_tens_digit':
            code_lines.extend([
                '    return (X // 10) % 10'
            ])
        elif task_type == 'func_hundreds_digit':
            code_lines.extend([
                '    return (X // 100) % 10'
            ])
        elif task_type == 'func_cube':
            code_lines.extend([
                '    return X * X * X'
            ])
        elif task_type == 'func_square':
            code_lines.extend([
                '    return X * X'
            ])
        elif task_type == 'func_round':
            code_lines.extend([
                '    from math import floor',
                '    if X - floor(X) >= 0.5:',
                '        return int(X) + 1',
                '    else:',
                '        return int(X)'
            ])
        elif task_type == 'func_round_up':
            code_lines.extend([
                '    import math',
                '    return math.ceil(X)'
            ])
        elif task_type == 'func_is_prime':
            code_lines.extend([
                '    if X < 2:',
                '        return 0',
                '    for i in range(2, int(X**0.5) + 1):',
                '        if X % i == 0:',
                '            return 0',
                '    return 1'
            ])
        elif task_type == 'func_is_palindrome':
            code_lines.extend([
                '    s = str(X)',
                '    return 1 if s == s[::-1] else 0'
            ])
        elif task_type == 'func_generic':
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
            if '—Å—É–º–º' in task_todo.lower() and '–Ω–∞—Ç—É—Ä' in task_todo.lower():
                code_lines.extend([
                    '    # Sum of natural numbers from 1 to X',
                    '    return sum(range(1, X + 1))'
                ])
            elif '–ø—Ä–æ–∏–∑–≤–µ–¥' in task_todo.lower() or '—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª' in task_todo.lower():
                code_lines.extend([
                    '    # Factorial or product',
                    '    result = 1',
                    '    for i in range(1, X + 1):',
                    '        result *= i',
                    '    return result'
                ])
            elif '—á–µ—Ç–Ω' in task_todo.lower():
                code_lines.extend([
                    '    # Check if even',
                    '    return 1 if X % 2 == 0 else 0'
                ])
            elif '–Ω–µ—á–µ—Ç–Ω' in task_todo.lower():
                code_lines.extend([
                    '    # Check if odd',
                    '    return 1 if X % 2 != 0 else 0'
                ])
            elif '–ø–æ–ª–æ–∂–∏—Ç' in task_todo.lower():
                code_lines.extend([
                    '    # Check if positive',
                    '    return 1 if X > 0 else 0'
                ])
            elif '–æ—Ç—Ä–∏—Ü–∞—Ç' in task_todo.lower():
                code_lines.extend([
                    '    # Check if negative',
                    '    return 1 if X < 0 else 0'
                ])
            elif '—Ü–∏—Ñ—Ä' in task_todo.lower() and '—Å—É–º–º' in task_todo.lower():
                code_lines.extend([
                    '    # Sum of digits',
                    '    total = 0',
                    '    x = abs(X)',
                    '    while x > 0:',
                    '        total += x % 10',
                    '        x //= 10',
                    '    return total'
                ])
            elif '—Ü–∏—Ñ—Ä' in task_todo.lower() and ('–∫–æ–ª–∏—á–µ—Å—Ç' in task_todo.lower() or '—Å–∫–æ–ª—å–∫' in task_todo.lower()):
                code_lines.extend([
                    '    # Count of digits',
                    '    if X == 0:',
                    '        return 1',
                    '    count = 0',
                    '    x = abs(X)',
                    '    while x > 0:',
                    '        count += 1',
                    '        x //= 10',
                    '    return count'
                ])
            else:
                # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
                code_lines.extend([
                    '    # TODO: Implement based on task description',
                    f'    # Task: {task_todo}',
                    '    return 0  # Placeholder'
                ])
        elif task_id == "10" or task_type == 'arr_fill_zeros':  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω—É–ª—è–º–∏
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = 0',
                '    return A'
            ])
        elif task_id == "11":  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = i + 1',
                '    return A'
            ])
        elif task_id == "12":  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç X
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = X + i',
                '    return A'
            ])
        elif task_id == "13":  # –ü–ª—é—Å 5
            code_lines.extend([
                '    A[0] = X',
                '    for i in range(1, N):',
                '        A[i] = A[i-1] + 5',
                '    return A'
            ])
        elif task_id == "14":  # –§–∏–±–æ–Ω–∞—á—á–∏
            code_lines.extend([
                '    if N >= 1:',
                '        A[0] = 1',
                '    if N >= 2:',
                '        A[1] = 1',
                '    for i in range(2, N):',
                '        A[i] = A[i-1] + A[i-2]',
                '    return A'
            ])
        elif task_id == "15":  # –°—Ç–µ–ø–µ–Ω–∏ 2
            code_lines.extend([
                '    A[N-1] = 1',
                '    for i in range(N-2, -1, -1):',
                '        A[i] = 2 * A[i+1]',
                '    return A'
            ])
        elif task_id == "16":  # –ì–æ—Ä–∫–∞
            code_lines.extend([
                '    c = N // 2',
                '    A[c] = X',
                '    for i in range(c-1, -1, -1):',
                '        A[i] = A[i+1] - 1',
                '    for i in range(c+1, N):',
                '        A[i] = A[i-1] - 1',
                '    return A'
            ])
        elif task_id == "20":  # –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 1
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = A[i] + 1',
                '    return A'
            ])
        elif task_id == "21":  # –£–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 2
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = A[i] * 2',
                '    return A'
            ])
        elif task_id == "22":  # –ö–≤–∞–¥—Ä–∞—Ç
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = A[i] * A[i]',
                '    return A'
            ])
        elif task_id == "30":  # –ú–∞–∫—Å–∏–º—É–º
            code_lines.extend([
                '    max_val = A[0]',
                '    for i in range(N):',
                '        if A[i] > max_val:',
                '            max_val = A[i]',
                '    return max_val'
            ])
        elif task_id == "31":  # –ú–∏–Ω–∏–º—É–º
            code_lines.extend([
                '    min_val = A[0]',
                '    for i in range(N):',
                '        if A[i] < min_val:',
                '            min_val = A[i]',
                '    return min_val'
            ])
        elif task_id == "40":  # –°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü
            code_lines.extend([
                '    count = 0',
                '    for i in range(N):',
                '        if A[i] == 1:',
                '            count += 1',
                '    return count'
            ])
        elif task_id == "41":  # –°–∫–æ–ª—å–∫–æ —Ä–∞–≤–Ω—ã—Ö X
            code_lines.extend([
                '    count = 0',
                '    for i in range(N):',
                '        if A[i] == X:',
                '            count += 1',
                '    return count'
            ])
        elif task_id == "50":  # –°—É–º–º–∞ –≤—Å–µ—Ö
            code_lines.extend([
                '    total = 0',
                '    for i in range(N):',
                '        total += A[i]',
                '    return total'
            ])
        elif task_id == "60":  # –ù–æ–º–µ—Ä X
            code_lines.extend([
                '    for i in range(N):',
                '        if A[i] == X:',
                '            return i + 1  # 1-based index',
                '    return -1'
            ])
        else:
            # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            code_lines.extend([
                '    # TODO: Implement solution',
                f'    # Task: {task_todo}',
                '    pass'
            ])
        
        # –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        code_lines.extend([
            '',
            '',
            'def test_solution():',
            '    """Test the solution."""',
        ])
        
        if task_type.startswith('func_'):
            # –î–ª—è —Ñ—É–Ω–∫—Ü–∏–π
            code_lines.extend([
                '    test_values = [0, 1, 5, 123, 999]',
                '    for X in test_values:',
                f'        result = {short_name}(X)',
                '        print(f"Input: {X}, Result: {result}")',
                '    return True'
            ])
        elif task_type.startswith('algorithm_') or task_type.startswith('array_'):
            # –î–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä —Å –º–∞—Å—Å–∏–≤–∞–º–∏
            code_lines.extend([
                '    # Test with sample data',
                '    N = 5',
                '    A = [1, 2, 3, 4, 5]',
            ])
            
            if has_X:
                code_lines.append('    X = 3')
                code_lines.append(f'    result = {short_name}(N, A.copy(), X)')
            else:
                code_lines.append(f'    result = {short_name}(N, A.copy())')
            
            code_lines.extend([
                '    print(f"Input: N={N}, A={A}")',
                '    print(f"Result: {result}")',
                '    return result'
            ])
        else:
            # –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤
            code_lines.extend([
                '    N = 5',
                '    A = [0] * N',
            ])
            
            if has_X:
                code_lines.append('    X = 10')
                code_lines.append(f'    result = {short_name}(N, A.copy(), X)')
            else:
                code_lines.append(f'    result = {short_name}(N, A.copy())')
            
            code_lines.extend([
                '    print(f"Result: {result}")',
                '    return result'
            ])
        
        code_lines.extend([
            '',
            '',
            'if __name__ == "__main__":',
            '    test_solution()'
        ])
        
        return '\n'.join(code_lines)
    
    def generate_all_python_solutions(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á."""
        print("üêç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python —Ä–µ—à–µ–Ω–∏–π...")
        
        try:
            with open(self.tasks_json_file, 'r', encoding='utf-8') as f:
                tasks = json.load(f)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {self.tasks_json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        success_count = 0
        for task in tasks:
            task_id = task['task_id']
            task_type = self.detect_task_type(task)
            short_name = self.clean_task_name_for_filename(task['task_name'], task_id, task_type)
            
            python_code = self.generate_python_solution(task)
            
            filename = f"{task_id}_{short_name}.py"
            filepath = self.python_dir / filename
            
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(python_code)
                success_count += 1
                print(f"  ‚úÖ {filename}")
            except Exception as e:
                print(f"  ‚ùå {filename}: {e}")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {success_count}/{len(tasks)} Python —Ñ–∞–π–ª–æ–≤")
        return success_count == len(tasks)
    
    def test_all_solutions(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ Python —Ä–µ—à–µ–Ω–∏—è."""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python —Ä–µ—à–µ–Ω–∏–π...")
        
        python_files = list(self.python_dir.glob("*.py"))
        
        results = {
            "total": len(python_files),
            "success": 0,
            "failed": [],
            "details": []
        }
        
        for py_file in sorted(python_files):
            try:
                result = subprocess.run([
                    sys.executable, str(py_file)
                ], capture_output=True, text=True, timeout=5)
                
                if result.returncode == 0:
                    results["success"] += 1
                    results["details"].append({
                        "file": py_file.name,
                        "status": "success",
                        "output": result.stdout.strip()
                    })
                    print(f"  ‚úÖ {py_file.name}")
                else:
                    results["failed"].append(py_file.name)
                    results["details"].append({
                        "file": py_file.name,
                        "status": "error",
                        "error": result.stderr.strip()
                    })
                    print(f"  ‚ùå {py_file.name}")
                    
            except subprocess.TimeoutExpired:
                results["failed"].append(py_file.name)
                results["details"].append({
                    "file": py_file.name,
                    "status": "timeout",
                    "error": "Timeout > 5 seconds"
                })
                print(f"  ‚è∞ {py_file.name}")
            except Exception as e:
                results["failed"].append(py_file.name)
                results["details"].append({
                    "file": py_file.name,
                    "status": "exception",
                    "error": str(e)
                })
                print(f"  üí• {py_file.name}")
        
        success_rate = (results["success"] / results["total"]) * 100 if results["total"] > 0 else 0
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results['success']}/{results['total']} ({success_rate:.1f}%)")
        
        return results
    
    def create_comparison_framework(self, test_results: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è Python –∏ –ö–£–ú–ò–† —Ä–µ—à–µ–Ω–∏–π."""
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_script = f'''#!/usr/bin/env python3
"""
Framework for comparing Python and Kumir solutions.
Generated automatically by KumirToPythonPipeline.
"""

import sys
import json
from pathlib import Path

# Add python solutions to path
sys.path.append(str(Path(__file__).parent / "python_solutions"))

def load_tasks():
    """Load task data."""
    with open("tasks_data.json", "r", encoding="utf-8") as f:
        return json.load(f)

def compare_solutions():
    """Compare Python and Kumir solutions."""
    tasks = load_tasks()
    
    print("üîç Comparison Framework Ready")
    print("=" * 50)
    
    for task in tasks:
        task_id = task["task_id"]
        print(f"Task {{task_id}}: {{task['task_name']}}")
        
        # TODO: Implement Kumir interpreter integration
        # kumir_result = run_kumir_code(task["kumir_code"], test_data)
        # python_result = run_python_solution(task_id, test_data)
        # assert kumir_result == python_result
    
    print("\\n‚úÖ Framework ready for Kumir integration")

if __name__ == "__main__":
    compare_solutions()
'''
        
        try:
            with open(self.output_dir / "compare_solutions.py", 'w', encoding='utf-8') as f:
                f.write(comparison_script)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report_content = f"""# Kumir to Python Pipeline Report

## Summary
- **Input XML**: {self.xml_file_path}
- **Total Tasks**: {test_results['total']}
- **Successful Tests**: {test_results['success']}
- **Success Rate**: {(test_results['success']/test_results['total']*100):.1f}%

## Generated Files
- `tasks_data.json` - Parsed task data
- `python_solutions/` - Python implementations ({test_results['total']} files)
- `compare_solutions.py` - Comparison framework

## Test Results
"""
        
        for detail in test_results['details']:
            status_emoji = "‚úÖ" if detail['status'] == 'success' else "‚ùå"
            report_content += f"- {status_emoji} `{detail['file']}` - {detail['status']}\n"
        
        if test_results['failed']:
            report_content += f"\n## Failed Tests\n"
            for failed in test_results['failed']:
                report_content += f"- {failed}\n"
        
        report_content += f"""
## Usage
1. **Testing Python solutions**:
   ```bash
   python compare_solutions.py
   ```

2. **Integration with Kumir interpreter**:
   - Implement `run_kumir_code()` function
   - Add test data generation
   - Run comparison tests

## Next Steps
- Integrate with your Kumir interpreter
- Add comprehensive test data
- Implement automated comparison testing
"""
        
        try:
            with open(self.reports_dir / "pipeline_report.md", 'w', encoding='utf-8') as f:
                f.write(report_content)
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {self.reports_dir}/pipeline_report.md")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    def run_full_pipeline(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ Kumir to Python Pipeline")
        print("=" * 60)
        
        # –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ XML
        if not self.parse_kumir_xml_to_json():
            return False
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python —Ä–µ—à–µ–Ω–∏–π
        if not self.generate_all_python_solutions():
            return False
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
        test_results = self.test_all_solutions()
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if not self.create_comparison_framework(test_results):
            return False
        
        print("\n" + "=" * 60)
        print("üéâ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ: {self.output_dir}")
        print(f"üìä –ì–æ—Ç–æ–≤–æ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é: {test_results['success']}/{test_results['total']} –∑–∞–¥–∞—á")
        
        return True


    def convert_kumir_to_python(self, kumir_code: str) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ö–£–ú–ò–†–æ–≤—Å–∫–æ–≥–æ –∫–æ–¥–∞ –≤ Python."""
        lines = kumir_code.split('\n')
        python_lines = []
        
        for line in lines:
            line = line.strip()
            if not line or line in ['–Ω–∞—á', '–∫–æ–Ω']:
                continue
                
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
            line = line.replace('–∑–Ω–∞—á:=', 'result = ')
            line = line.replace(':=', ' = ')
            line = line.replace('mod(', '(')
            line = line.replace('div(', '(')
            line = line.replace(',', ' // ')
            line = line.replace('mod', '%')
            line = line.replace('div', '//')
            line = line.replace('–µ—Å–ª–∏', 'if')
            line = line.replace('—Ç–æ', ':')
            line = line.replace('–≤—Å–µ', '')
            line = line.replace('–¥–ª—è', 'for')
            line = line.replace('–æ—Ç', 'in range(')
            line = line.replace('–¥–æ', ',')
            line = line.replace('–Ω—Ü', ':')
            line = line.replace('–∫—Ü', '')
            
            if line:
                python_lines.append(line)
        
        return '\n    '.join(python_lines) if python_lines else 'pass'
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) != 2:
        print("Usage: python kumir_pipeline.py <xml_file_path>")
        print("Example: python kumir_pipeline.py pol_kurs.xml")
        sys.exit(1)
    
    xml_file = sys.argv[1]
    
    if not os.path.exists(xml_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {xml_file}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º pipeline
    pipeline = KumirToPythonPipeline(xml_file)
    success = pipeline.run_full_pipeline()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
