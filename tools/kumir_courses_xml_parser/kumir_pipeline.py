#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ XML —Ñ–∞–π–ª–æ–≤ –ö–£–ú–ò–†–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è Python —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
1. –ü–∞—Ä—Å–∏—Ç XML —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏ –ö–£–ú–ò–†–∞
2. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—á–µ–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –∏ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞—á
3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
4. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
5. –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
"""

import xml.etree.ElementTree as ET
import json
import re
import os
import sys
import subprocess
import shutil
from typing import Optional, List, Dict, Any, Set
from pathlib import Path

class KumirToPythonPipeline:
    """–ü–æ–ª–Ω—ã–π pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ö–£–ú–ò–†–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è Python —Ä–µ—à–µ–Ω–∏–π."""
    
    def __init__(self, xml_file_path: str, output_dir: str = "kumir_python_solutions"):
        self.xml_file_path = xml_file_path
        self.output_dir = Path(output_dir)
        self.tasks_json_file = self.output_dir / "tasks_data.json"
        self.python_dir = self.output_dir / "python_solutions"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫—É—Ä—Å–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        file_name = Path(xml_file_path).name.lower()
        if 'robot' in file_name:
            self.course_type = 'robot'
        elif '–≤–æ–¥–æ–ª–µ–π' in file_name:
            self.course_type = 'waterman'
        elif '–æ–≥—ç' in file_name:
            self.course_type = 'algorithms'
        else:
            self.course_type = 'general'
        self.reports_dir = self.output_dir / "reports"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.output_dir.mkdir(exist_ok=True)
        self.python_dir.mkdir(exist_ok=True)
        self.reports_dir.mkdir(exist_ok=True)
    
    def clean_task_name_for_filename(self, task_name: str, task_id: str, task_type: str = "") -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏."""
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if task_type:
            if task_type.startswith('func_'):
                type_names = {
                    'func_last_digit': 'last_digit',
                    'func_tens_digit': 'tens_digit', 
                    'func_hundreds_digit': 'hundreds_digit',
                    'func_cube': 'cube',
                    'func_square': 'square',
                    'func_round': 'round',
                    'func_round_up': 'round_up',
                    'func_is_prime': 'is_prime',
                    'func_is_palindrome': 'is_palindrome',
                    'func_count_binary_ones': 'count_binary_ones',
                    'func_count_binary_zeros': 'count_binary_zeros',
                    'func_count_ones': 'count_ones',
                    'func_count_elements': 'count_elements',
                    'func_sum_array': 'sum_array',
                    'func_max_array': 'max_array',
                    'func_min_array': 'min_array',
                    'func_complex_algorithm': 'complex_func',
                    'func_generic': 'function'
                }
                return type_names.get(task_type, 'function')
            elif task_type.startswith('algorithm_'):
                type_names = {
                    'algorithm_binary_search': 'binary_search',
                    'algorithm_sort': 'sort_algorithm', 
                    'algorithm_complex': 'complex_algorithm'
                }
                return type_names.get(task_type, 'algorithm')
            elif task_type.startswith('array_'):
                type_names = {
                    'array_reverse': 'array_reverse',
                    'array_shift': 'array_shift',
                    'array_sort': 'array_sort',
                    'array_fill': 'array_fill',
                    'array_search': 'array_search',
                    'array_modify': 'array_modify',
                    'array_procedure': 'array_proc',
                    'array_proc': 'array_proc',
                    'array_inc_by1': 'arr_inc_by1',
                    'array_inc_byX': 'arr_inc_byX',
                    'array_mult_by2': 'arr_mult_by2',
                    'array_mult_byX': 'arr_mult_byX',
                    'array_square': 'arr_square'
                }
                return type_names.get(task_type, 'array_task')
            elif task_type in ['robot_task', 'waterman_task', 'empty_task']:
                return f'task_{task_id}'
            elif task_type == 'string_task':
                return 'string_task'
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        name_mappings = {
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
            "10": "arr_fill_zeros",
            "11": "arr_fill_natural", 
            "12": "arr_fill_from_x",
            "13": "arr_fill_plus5",
            "14": "arr_fill_fibonacci",
            "15": "arr_fill_powers2",
            "16": "arr_fill_pyramid",
            
            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤
            "20": "arr_inc_by1",
            "21": "arr_mult_by2", 
            "22": "arr_square",
            "23": "arr_inc_first_half",
            "24": "arr_div_middle",
            "25": "arr_mult_second_half",
            "26": "arr_average",
            
            # –ü–æ–∏—Å–∫ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
            "30": "arr_find_max",
            "31": "arr_find_min",
            "32": "arr_find_minmax",
            "33": "arr_find_min_index",
            "34": "arr_find_minmax_indices",
            "35": "arr_find_two_max",
            "36": "arr_find_two_min_indices",
            
            # –ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            "40": "arr_count_ones",
            "41": "arr_count_equal_x",
            "42": "arr_count_positive",
            "43": "arr_count_even_odd",
            "44": "arr_count_even_positive",
            "45": "arr_count_digit5",
            "46": "arr_count_same_digits",
            
            # –°—É–º–º—ã –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            "50": "arr_sum_all",
            "51": "arr_sum_negative",
            "52": "arr_sum_div3",
            "53": "arr_avg_less50",
            "54": "arr_prod_even_pos",
            "55": "arr_sum_tens_gt_units",
            "56": "arr_sum_all_same_digits",
            
            # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
            "60": "arr_find_x_index",
            "61": "arr_find_x_first_half",
            "62": "arr_find_x_second_half",
            "63": "arr_find_x_last_second_half",
            "64": "arr_count_x_first_half",
            "65": "arr_count_x_pairs",
            "66": "arr_count_hills",
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
            "71": "arr_count_same_digits",
            "72": "arr_longest_chain",
            "73": "arr_count_primes",
            "74": "arr_fill_primes",
            "75": "arr_sum_palindromes",
            "76": "arr_fill_hyperprimes"
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–∑ task_id
        return name_mappings.get(task_id, f"task_{task_id}")
    
    def parse_kumir_xml_to_json(self) -> bool:
        """–ü–∞—Ä—Å–∏—Ç XML —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ JSON."""
        print(f"üìÅ –ü–∞—Ä—Å–∏–Ω–≥ XML —Ñ–∞–π–ª–∞: {self.xml_file_path}")
        
        if not os.path.exists(self.xml_file_path):
            print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {self.xml_file_path}")
            return False

        all_tasks_data: List[Dict[str, Any]] = []
        processed_ids: Set[str] = set()

        try:
            tree = ET.parse(self.xml_file_path)
            root: ET.Element = tree.getroot()
        except ET.ParseError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
            return False

        elements_to_process = root.findall('.//USER_PRG') + root.findall('.//TESTED_PRG')

        for task_element in elements_to_process:
            test_id: Optional[str] = task_element.get('testId')
            prg_full_content: Optional[str] = task_element.get('prg')

            if not prg_full_content or not test_id or test_id in processed_ids:
                continue
            
            processed_ids.add(test_id)
            prg_full_content = prg_full_content.strip()

            # –û—Ç–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
            testing_separator = "–∞–ª–≥ —Ü–µ–ª @—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ|@hidden"
            student_program_part = prg_full_content.split(testing_separator, 1)[0].strip()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
            
            # 1. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            alg_match = re.search(r'–∞–ª–≥\s+(.+?)\s*\|\@protected', student_program_part, re.DOTALL)
            alg_name = alg_match.group(1).strip() if alg_match else ""
            
            # 2. –ë–ª–æ–∫ "–¥–∞–Ω–æ"
            dano_match = re.search(r'–¥–∞–Ω–æ\s*\|\s*(.+?)\s*\|\@protected', student_program_part, re.DOTALL)
            dano_content = dano_match.group(1).strip() if dano_match else ""
            dano_clean = re.sub(r'\s*\|\s*', ' ', dano_content)
            dano_clean = re.sub(r'\s+', ' ', dano_clean).strip()
            
            # 3. –ë–ª–æ–∫ "–Ω–∞–¥–æ"
            nado_start_match = re.search(r'–Ω–∞–¥–æ\s*\|', student_program_part)
            if nado_start_match:
                nado_start_pos = nado_start_match.start()
                nach_match = re.search(r'–Ω–∞—á\s*\|\@protected', student_program_part[nado_start_pos:])
                if nach_match:
                    nado_end_pos = nado_start_pos + nach_match.start()
                    nado_block = student_program_part[nado_start_pos:nado_end_pos].strip()
                    
                    nado_content = re.sub(r'–Ω–∞–¥–æ\s*\|\s*', '', nado_block)
                    nado_content = re.sub(r'\|\@protected', '', nado_content)
                    nado_content = re.sub(r'^\s*\|\s*', '', nado_content, flags=re.MULTILINE)
                    nado_clean = re.sub(r'\s+', ' ', nado_content).strip()
                else:
                    nado_clean = ""
            else:
                nado_clean = ""
            
            # 4. –£—á–µ–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–¥
            student_code = ""
            nach_match = re.search(r'–Ω–∞—á\s*\|\@protected', student_program_part)
            if nach_match:
                code_start_pos = nach_match.start()
                kon_match = re.search(r'–∫–æ–Ω\s*\|\@protected', student_program_part[code_start_pos:])
                if kon_match:
                    code_end_pos = code_start_pos + kon_match.end()
                    student_code_raw = student_program_part[code_start_pos:code_end_pos].strip()
                    
                    student_code = re.sub(r'\|\@protected', '', student_code_raw)
                    student_code = re.sub(r'^\s*\|\s*', '', student_code, flags=re.MULTILINE)
                    student_code = student_code.strip()

            task_data: Dict[str, str] = {
                "task_id": test_id,
                "task_name": alg_name,
                "task_init": dano_clean,
                "task_todo": nado_clean,
                "kumir_code": student_code
            }
            all_tasks_data.append(task_data)

        all_tasks_data.sort(key=lambda x: int(x['task_id']) if x['task_id'].isdigit() else 0)
        
        try:
            with open(self.tasks_json_file, 'w', encoding='utf-8') as f:
                json.dump(all_tasks_data, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(all_tasks_data)} –∑–∞–¥–∞—á –≤ {self.tasks_json_file}")
            return True
        except IOError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
            return False
    
    def detect_task_type(self, task: Dict[str, str]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ."""
        task_name = task['task_name'].lower()
        task_init = task['task_init'].lower()
        task_todo = task['task_todo'].lower()
        kumir_code = task['kumir_code'].lower()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
        if not task_name.strip() and not task_init.strip() and not task_todo.strip() and not kumir_code.strip():
            return 'empty_task'
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫—É—Ä—Å —Ä–æ–±–æ—Ç–æ–≤ - –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å—á–∏—Ç–∞–µ–º robot_task
        if self.course_type == 'robot':
            return 'robot_task'
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫—É—Ä—Å –í–æ–¥–æ–ª–µ—è - –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å—á–∏—Ç–∞–µ–º waterman_task
        if self.course_type == 'waterman':
            return 'waterman_task'
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if ('—Ä–æ–±–æ—Ç' in task_name or '—Ä–æ–±–æ—Ç' in task_init or '—Ä–æ–±–æ—Ç' in task_todo or 
            any(cmd in kumir_code for cmd in ['–≤–≤–µ—Ä—Ö', '–≤–Ω–∏–∑', '–≤–ª–µ–≤–æ', '–≤–ø—Ä–∞–≤–æ', '–∑–∞–∫—Ä–∞—Å–∏—Ç—å'])):
            return 'robot_task'
        
        if ('–≤–æ–¥–æ–ª–µ–π' in task_name or '–≤–æ–¥–æ–ª–µ–π' in task_init or '–≤–æ–¥–æ–ª–µ–π' in task_todo or
            any(cmd in kumir_code for cmd in ['–Ω–∞–ø–æ–ª–Ω–∏—Ç—å', '–æ–ø—É—Å—Ç–æ—à–∏—Ç—å', '–ø–µ—Ä–µ–ª–∏—Ç—å'])):
            return 'waterman_task'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö)
        has_array = any(keyword in task_name for keyword in ['–∞—Ä–≥—Ä–µ–∑', '—Ü–µ–ª—Ç–∞–±', '–≤–µ—â—Ç–∞–±', '–ª–æ—Ç—Ç–∞–±', '–º–∞—Å—Å–∏–≤'])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–∏–≤–æ–≤ (–ø—Ä–∏–Ω–∏–º–∞—é—Ç –∏ –∏–∑–º–µ–Ω—è—é—Ç –º–∞—Å—Å–∏–≤) - –°–ù–ê–ß–ê–õ–ê!
        has_argresult_array = any(keyword in task_name for keyword in ['–∞—Ä–≥—Ä–µ–∑ —Ü–µ–ª—Ç–∞–±', '–∞—Ä–≥—Ä–µ–∑ –≤–µ—â—Ç–∞–±', '–∞—Ä–≥—Ä–µ–∑ –ª–æ—Ç—Ç–∞–±'])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö (—Ç–æ–ª—å–∫–æ —Ä–µ–∑, –Ω–æ –ù–ï –∞—Ä–≥—Ä–µ–∑) - –ü–û–°–õ–ï!
        # –í–∞–∂–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º " —Ä–µ–∑ " —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å "–∞—Ä–≥—Ä–µ–∑"
        has_result_array = any(
            (f' {keyword}' in task_name or task_name.startswith(keyword))
            for keyword in ['—Ä–µ–∑ —Ü–µ–ª—Ç–∞–±', '—Ä–µ–∑ –≤–µ—â—Ç–∞–±', '—Ä–µ–∑ –ª–æ—Ç—Ç–∞–±']
        )
        
        # –°–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã (—Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–≤–æ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –∏ —Ç.–¥.)
        # –ò—Å–∫–ª—é—á–∞–µ–º "–¥–≤–æ–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏" - —ç—Ç–æ –Ω–µ –¥–≤–æ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫!
        if any(keyword in task_todo for keyword in ['–ø—É–∑—ã—Ä', '–±—ã—Å—Ç—Ä', '—Å–ª–∏—è–Ω']):
            return 'algorithm_complex'
        elif '—Å–æ—Ä—Ç–∏—Ä' in task_todo and not any(x in task_todo for x in ['–ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏', '–º–∞–∫—Å–∏–º—É–º', '–º–∏–Ω–∏–º—É–º', '—ç–∫—Å—Ç—Ä–µ–º—É–º', '–¥–≤–∞ –º–∞–∫—Å–∏–º—É–º–∞', '–¥–≤–∞ –º–∏–Ω–∏–º—É–º–∞', '–≤—Ç–æ—Ä–æ–π –º–∞–∫—Å–∏–º—É–º', '–≤—Ç–æ—Ä–æ–π –º–∏–Ω–∏–º—É–º']):
            # –†–µ–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            return 'algorithm_sort'
        # –ù–∞—Å—Ç–æ—è—â–∏–π –¥–≤–æ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ - —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ "–¥–≤–æ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫" –∏–ª–∏ "–±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫"
        if ('–¥–≤–æ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫' in task_todo or '–±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫' in task_todo) and '–∑–∞–ø–∏—Å–∏' not in task_todo:
            return 'algorithm_binary_search'
        
        # –ü–†–û–¶–ï–î–£–†–´ —Å –∞—Ä–≥—É–º–µ–Ω—Ç-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–∏–≤–∞–º–∏ (–∏–∑–º–µ–Ω—è—é—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤) - –°–ù–ê–ß–ê–õ–ê!
        if has_argresult_array:
            if '—É–≤–µ–ª–∏—á' in task_todo:
                if '1' in task_todo or '–Ω–∞ 1' in task_todo:
                    return 'array_inc_by1'
                elif '–ø–æ–ª–æ–≤–∏–Ω' in task_todo or '—á–∞—Å—Ç—å' in task_todo:
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞
                    return 'array_proc'
                else:
                    return 'array_inc_byX'
            elif '—É–º–Ω–æ–∂' in task_todo:
                if '2' in task_todo or '–Ω–∞ 2' in task_todo:
                    return 'array_mult_by2'
                elif '–ø–æ–ª–æ–≤–∏–Ω' in task_todo or '—á–∞—Å—Ç—å' in task_todo:
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ - —É–º–Ω–æ–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞
                    return 'array_proc'
                else:
                    return 'array_mult_byX'
            elif '–∫–≤–∞–¥—Ä–∞—Ç' in task_todo:
                return 'array_square'
            elif '—Ä–µ–≤–µ—Ä—Å' in task_todo or '–æ–±—Ä–∞—Ç–Ω' in task_todo:
                return 'array_reverse'
            elif '—Ü–∏–∫–ª–∏—á–µ—Å–∫' in task_todo or '—Å–¥–≤–∏–≥' in task_todo:
                return 'array_shift'
            elif '—Å–æ—Ä—Ç–∏—Ä' in task_todo:
                return 'array_sort'
            else:
                return 'array_procedure'
        
        # –ü–†–û–¶–ï–î–£–†–´ —Å —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ü–û–°–õ–ï –∞—Ä–≥—Ä–µ–∑!)
        if has_result_array:
            if '–∑–∞–ø–æ–ª–Ω' in task_todo:
                if '–Ω—É–ª' in task_todo:
                    return 'arr_fill_zeros'
                elif '–Ω–∞—Ç—É—Ä' in task_todo:
                    return 'arr_fill_natural'
                elif '—Ñ–∏–±–æ' in task_todo:
                    return 'arr_fill_fibonacci'
                elif '—Å—Ç–µ–ø–µ–Ω' in task_todo or '2^' in task_todo:
                    return 'arr_fill_powers2'
                elif '–≥–æ—Ä–∫' in task_todo:
                    return 'arr_fill_pyramid'
                else:
                    return 'arr_fill_generic'
            elif '—É–≤–µ–ª–∏—á' in task_todo:
                return 'arr_modify_increase'
            elif '—É–º–Ω–æ–∂' in task_todo:
                return 'arr_modify_multiply'
            elif '–∫–≤–∞–¥—Ä–∞—Ç' in task_todo:
                return 'arr_modify_square'
            else:
                return 'array_procedure'
        
        # –§—É–Ω–∫—Ü–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ) - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ü–ï–†–ï–î –º–∞—Å—Å–∏–≤–∞–º–∏!
        if any(prefix in task_name for prefix in ['—Ü–µ–ª ', '–≤–µ—â ', '–ª–æ–≥ ', '–ª–∏—Ç ']) and ('–∞—Ä–≥' in task_name or '(' in task_name):
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if '—Å—Ä–µ–¥–Ω' in task_todo and '–∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫' in task_todo:
                return 'func_average'
            elif '–º–∏–Ω–∏–º—É–º' in task_todo or '–Ω–∞–∏–º–µ–Ω—å—à' in task_todo:
                return 'func_min'
            elif '–º–∞–∫—Å–∏–º—É–º' in task_todo or '–Ω–∞–∏–±–æ–ª—å—à' in task_todo:
                return 'func_max'
            elif '–ª–æ–≥ ' in task_name and ('–æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è' in task_todo or '–Ω–∞ 0' in task_todo):
                return 'func_ends_with_zero'
            elif '—Å—á–∞—Å—Ç–ª–∏–≤' in task_todo:
                return 'func_lucky_ticket'
            elif '–µ–¥–∏–Ω–∏—Ü' in task_name and '–¥–≤–æ–∏—á–Ω' in task_todo:
                return 'func_count_binary_ones'
            elif '–Ω—É–ª–µ–π' in task_name and '–¥–≤–æ–∏—á–Ω' in task_todo:
                return 'func_count_binary_zeros'
            elif '–ø–∞–ª–∏–Ω–¥—Ä–æ–º' in task_name:
                return 'func_is_palindrome'
            elif '–ø—Ä–æ—Å—Ç' in task_name:
                return 'func_is_prime'
            # –§—É–Ω–∫—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            elif '–µ–¥–∏–Ω–∏—Ü' in task_name and has_array:
                return 'func_count_ones'
            elif ('–∫–æ–ª–∏—á–µ—Å—Ç' in task_todo.lower() or '–∫–æ–ª–∏—á–µ—Å—Ç' in task_name.lower()) and has_array:
                return 'func_count_elements'
            elif ('—Å–∫–æ–ª—å–∫' in task_todo.lower() or '—Å–∫–æ–ª—å–∫' in task_name.lower()) and has_array:
                return 'func_count_elements'  
            elif '—Å—É–º–º' in task_todo and has_array:
                return 'func_sum_array'
            elif '–º–∞–∫—Å' in task_todo and has_array:
                return 'func_max_array'
            elif '–º–∏–Ω' in task_todo and has_array:
                return 'func_min_array'
            # –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            elif '–ø–æ—Å–ª–µ–¥–Ω' in task_name and '—Ü–∏—Ñ—Ä' in task_name:
                return 'func_last_digit'
            elif '–¥–µ—Å—è—Ç–∫' in task_name:
                return 'func_tens_digit'
            elif '—Å–æ—Ç–µ–Ω' in task_name:
                return 'func_hundreds_digit'
            elif '–∫—É–±' in task_name and not ('–ø–æ–∏—Å–∫' in task_todo or '–∫–æ—Ä–µ–Ω' in task_todo):
                return 'func_cube'
            elif '–∫–≤–∞–¥—Ä–∞—Ç' in task_name and not ('–ø–æ–∏—Å–∫' in task_todo or '–∫–æ—Ä–µ–Ω' in task_todo):
                return 'func_square'
            elif '–æ–∫—Ä—É–≥–ª' in task_name:
                if '–≤–≤–µ—Ä—Ö' in task_name:
                    return 'func_round_up'
                else:
                    return 'func_round'
            elif '–ø—Ä–æ—Å—Ç' in task_name:
                return 'func_is_prime'
            elif '–ø–∞–ª–∏–Ω–¥—Ä–æ–º' in task_name:
                return 'func_is_palindrome'
            # –°–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            elif any(keyword in task_todo for keyword in ['—à–∞–≥', '–ø–æ–∏—Å–∫', '–∫–æ—Ä–µ–Ω', '–∞–ª–≥–æ—Ä–∏—Ç–º']):
                return 'func_complex_algorithm'
            else:
                return 'func_generic'
        
        # –ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï —Ñ—É–Ω–∫—Ü–∏—è!)
        if has_array:
            if '—Ä–µ–≤–µ—Ä—Å' in task_name or '–æ–±—Ä–∞—Ç–Ω' in task_todo:
                return 'array_reverse'
            elif '—Ü–∏–∫–ª–∏—á–µ—Å–∫' in task_todo or '—Å–¥–≤–∏–≥' in task_todo:
                return 'array_shift'
            elif '—Å–æ—Ä—Ç–∏—Ä' in task_todo:
                return 'array_sort'
            elif '–∑–∞–ø–æ–ª–Ω' in task_todo:
                return 'array_fill'
            elif '–Ω–∞–π—Ç' in task_todo or '–ø–æ–∏—Å–∫' in task_todo:
                return 'array_search'
            elif '—É–¥–∞–ª' in task_todo or '–≤—Å—Ç–∞–≤–∫' in task_todo:
                return 'array_modify'
            else:
                return 'array_procedure'
        
        # –§—É–Ω–∫—Ü–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ) - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ü–ï–†–ï–î —Å—Ç—Ä–æ–∫–∞–º–∏!
        if any(prefix in task_name for prefix in ['—Ü–µ–ª ', '–≤–µ—â ', '–ª–æ–≥ ', '–ª–∏—Ç ']) and ('–∞—Ä–≥' in task_name or '(' in task_name):
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if '—Å—Ä–µ–¥–Ω' in task_todo and '–∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫' in task_todo:
                return 'func_average'
            elif '–º–∏–Ω–∏–º—É–º' in task_todo or '–Ω–∞–∏–º–µ–Ω—å—à' in task_todo:
                return 'func_min'
            elif '–º–∞–∫—Å–∏–º—É–º' in task_todo or '–Ω–∞–∏–±–æ–ª—å—à' in task_todo:
                return 'func_max'
            elif '–ª–æ–≥ ' in task_name and ('–æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è' in task_todo or '–Ω–∞ 0' in task_todo):
                return 'func_ends_with_zero'
            elif '—Å—á–∞—Å—Ç–ª–∏–≤' in task_todo:
                return 'func_lucky_ticket'
            elif '–µ–¥–∏–Ω–∏—Ü' in task_name and '–¥–≤–æ–∏—á–Ω' in task_todo:
                return 'func_count_binary_ones'
            elif '–Ω—É–ª–µ–π' in task_name and '–¥–≤–æ–∏—á–Ω' in task_todo:
                return 'func_count_binary_zeros'
            elif '–ø–∞–ª–∏–Ω–¥—Ä–æ–º' in task_name:
                return 'func_is_palindrome'
            elif '–ø—Ä–æ—Å—Ç' in task_name:
                return 'func_is_prime'
            # –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            elif '–ø–æ—Å–ª–µ–¥–Ω' in task_name and '—Ü–∏—Ñ—Ä' in task_name:
                return 'func_last_digit'
            elif '–¥–µ—Å—è—Ç–∫' in task_name:
                return 'func_tens_digit'
            elif '—Å–æ—Ç–µ–Ω' in task_name:
                return 'func_hundreds_digit'
            elif '–∫—É–±' in task_name and not ('–ø–æ–∏—Å–∫' in task_todo or '–∫–æ—Ä–µ–Ω' in task_todo):
                return 'func_cube'
            elif '–∫–≤–∞–¥—Ä–∞—Ç' in task_name and not ('–ø–æ–∏—Å–∫' in task_todo or '–∫–æ—Ä–µ–Ω' in task_todo):
                return 'func_square'
            elif '–æ–∫—Ä—É–≥–ª' in task_name:
                if '–≤–≤–µ—Ä—Ö' in task_name:
                    return 'func_round_up'
                else:
                    return 'func_round'
            elif '–ø—Ä–æ—Å—Ç' in task_name:
                return 'func_is_prime'
            elif '–ø–∞–ª–∏–Ω–¥—Ä–æ–º' in task_name:
                return 'func_is_palindrome'
            # –°–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            elif any(keyword in task_todo for keyword in ['—à–∞–≥', '–ø–æ–∏—Å–∫', '–∫–æ—Ä–µ–Ω', '–∞–ª–≥–æ—Ä–∏—Ç–º']):
                return 'func_complex_algorithm'
            else:
                return 'func_generic'
        
        # –ú–∞—Å—Å–∏–≤—ã - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑ –∞—Ä–≥—Ä–µ–∑ –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ)
        if '–∑–∞–ø–æ–ª–Ω' in task_todo or '–∑–∞–ø–æ–ª–Ω' in task_name:
            if '–Ω—É–ª' in task_todo:
                return 'arr_fill_zeros'
            elif '–Ω–∞—Ç—É—Ä' in task_todo:
                return 'arr_fill_natural'
            elif '—Ñ–∏–±–æ' in task_todo:
                return 'arr_fill_fibonacci'
            elif '—Å—Ç–µ–ø–µ–Ω' in task_todo or '2^' in task_todo:
                return 'arr_fill_powers2'
            elif '–≥–æ—Ä–∫' in task_todo:
                return 'arr_fill_pyramid'
            else:
                return 'arr_fill_generic'
        
        # –ú–∞—Å—Å–∏–≤—ã - –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if '—É–≤–µ–ª–∏—á' in task_todo:
            return 'arr_modify_increase'
        elif '—É–º–Ω–æ–∂' in task_todo:
            return 'arr_modify_multiply'
        elif '–∫–≤–∞–¥—Ä–∞—Ç' in task_todo:
            return 'arr_modify_square'
        
        # –ú–∞—Å—Å–∏–≤—ã - –ø–æ–∏—Å–∫
        elif '–º–∞–∫—Å' in task_todo:
            return 'arr_find_max'
        elif '–º–∏–Ω' in task_todo:
            return 'arr_find_min'
        elif '–Ω–∞–π—Ç' in task_todo:
            return 'arr_find_value'
        
        # –ú–∞—Å—Å–∏–≤—ã - –ø–æ–¥—Å—á–µ—Ç
        elif '—Å–∫–æ–ª—å–∫' in task_todo or '–∫–æ–ª–∏—á–µ—Å—Ç' in task_todo:
            return 'arr_count'
        
        # –ú–∞—Å—Å–∏–≤—ã - —Å—É–º–º–∞
        elif '—Å—É–º–º' in task_todo:
            return 'arr_sum'
        
        # –°—Ç—Ä–æ–∫–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ü–û–°–õ–ï —Ñ—É–Ω–∫—Ü–∏–π!)
        if '—Å—Ç—Ä–æ–∫' in task_name.lower() or ('–ª–∏—Ç' in task_name and '–ª–∏—Ç ' not in task_name):
            return 'string_task'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 'generic_task'

    def generate_python_solution(self, task: Dict[str, str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python –∫–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        task_id = task['task_id']
        task_name = task['task_name']
        task_init = task['task_init']
        task_todo = task['task_todo']
        kumir_code = task['kumir_code']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
        import re
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π –º–µ—Ç–æ–¥
        params = []
        param_types = {}
        array_params = set()
        string_params = set()
        
        # –ò—â–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–∫–æ–±–∫–∞—Ö –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º
        paren_match = re.search(r'\(([^)]+)\)', task_name)
        if paren_match:
            content = paren_match.group(1)
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –∏—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            parts = [p.strip() for p in content.split(',')]
            for part in parts:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–∏–ø–∞ "–∞—Ä–≥—Ä–µ–∑ —Ü–µ–ª X" –∏–ª–∏ "–∞—Ä–≥ –ª–∏—Ç Y"
                if re.match(r'–∞—Ä–≥—Ä–µ–∑\s+(—Ü–µ–ª|–≤–µ—â|–ª–æ–≥|–ª–∏—Ç)—Ç–∞–±\s+[A-Z][a-zA-Z0-9]*', part):
                    # –ê—Ä–≥—É–º–µ–Ω—Ç-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–∏–≤: –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∏–∂–µ
                    array_match = re.search(r'–∞—Ä–≥—Ä–µ–∑\s+(—Ü–µ–ª|–≤–µ—â|–ª–æ–≥|–ª–∏—Ç)—Ç–∞–±\s+([A-Z][a-zA-Z0-9]*)', part)
                    if array_match:
                        var_name = array_match.group(2)
                        var_type = array_match.group(1) + '—Ç–∞–±'
                        params.append(var_name)
                        param_types[var_name] = var_type
                        array_params.add(var_name)
                elif re.match(r'–∞—Ä–≥\s+(—Ü–µ–ª|–≤–µ—â|–ª–æ–≥|–ª–∏—Ç)\s+[A-Z][a-zA-Z0-9]*', part):
                    # –ê—Ä–≥—É–º–µ–Ω—Ç: "–∞—Ä–≥ —Ü–µ–ª X"
                    arg_match = re.search(r'–∞—Ä–≥\s+(—Ü–µ–ª|–≤–µ—â|–ª–æ–≥|–ª–∏—Ç)\s+([A-Z][a-zA-Z0-9]*)', part)
                    if arg_match:
                        var_name = arg_match.group(2)
                        var_type = arg_match.group(1)
                        params.append(var_name)
                        param_types[var_name] = var_type
                        if var_type == '–ª–∏—Ç':
                            string_params.add(var_name)
                elif re.match(r'(—Ü–µ–ª|–≤–µ—â|–ª–æ–≥|–ª–∏—Ç)—Ç–∞–±\s+[A-Z][a-zA-Z0-9]*', part):
                    # –ú–∞—Å—Å–∏–≤: "—Ü–µ–ª—Ç–∞–± A[1:N]"
                    array_match = re.search(r'(—Ü–µ–ª|–≤–µ—â|–ª–æ–≥|–ª–∏—Ç)—Ç–∞–±\s+([A-Z][a-zA-Z0-9]*)', part)
                    if array_match:
                        var_name = array_match.group(2)
                        var_type = array_match.group(1) + '—Ç–∞–±'
                        params.append(var_name)
                        param_types[var_name] = var_type
                        array_params.add(var_name)
                else:
                    # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã: "–ª–∏—Ç s", "—Ü–µ–ª x", etc.
                    simple_match = re.search(r'(—Ü–µ–ª|–≤–µ—â|–ª–æ–≥|–ª–∏—Ç)\s+([a-zA-Z][a-zA-Z0-9]*)', part)
                    if simple_match:
                        var_name = simple_match.group(2)
                        var_type = simple_match.group(1)
                        params.append(var_name)
                        param_types[var_name] = var_type
                        if var_type == '–ª–∏—Ç':
                            string_params.add(var_name)
                    else:
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ–Ω—Ü–µ
                        var_match = re.search(r'([a-zA-Z][a-zA-Z0-9]*)$', part.strip())
                        if var_match:
                            params.append(var_match.group(1))
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ task_name, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ task_init
        if not params:
            # –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ–∏—Å–∫ –∞—Ä–≥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–≤–∫–ª—é—á–∞—è –º–∞—Å—Å–∏–≤—ã)
            # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—Å–∏–≤–æ–≤: –∞—Ä–≥—Ä–µ–∑ —Ü–µ–ª—Ç–∞–± X, –∞—Ä–≥—Ä–µ–∑ –≤–µ—â—Ç–∞–± A, etc.
            array_param_matches = re.findall(r'–∞—Ä–≥—Ä–µ–∑\s+(?:—Ü–µ–ª|–≤–µ—â|–ª–æ–≥|–ª–∏—Ç)—Ç–∞–±\s+([A-Z][a-zA-Z0-9]*)', task_name)
            if array_param_matches:
                params.extend(array_param_matches)
            
            # –ò—â–µ–º –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∞—Ä–≥ —Ü–µ–ª X, –∞—Ä–≥ –ª–∏—Ç S, etc.
            param_matches = re.findall(r'–∞—Ä–≥\s+(?:—Ü–µ–ª|–≤–µ—â|–ª–∏—Ç|–ª–æ–≥)\s+([A-Z][a-zA-Z0-9]*)', task_name)
            if param_matches:
                params.extend(param_matches)
        
        # –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ task_init (–±–ª–æ–∫ "–¥–∞–Ω–æ")
        if not params or len(params) < 2:
            # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ task_init –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Ü–µ–ª N, —Ç–∞–± —Ü–µ–ª A[1:N], —Ü–µ–ª X"
            init_params = []
            
            # –ò—â–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ü–µ–ª N, —Ü–µ–ª X, –ª–∏—Ç s
            simple_params = re.findall(r'(?:^|,\s*)(?:–∞—Ä–≥\s+)?(—Ü–µ–ª|–≤–µ—â|–ª–∏—Ç|–ª–æ–≥)\s+([A-Z][a-zA-Z0-9]*)', task_init)
            for param_type, param_name in simple_params:
                if param_name not in init_params:
                    init_params.append(param_name)
                    param_types[param_name] = param_type
                    if param_type == '–ª–∏—Ç':
                        string_params.add(param_name)
            
            # –ò—â–µ–º –º–∞—Å—Å–∏–≤—ã: —Ç–∞–± —Ü–µ–ª A[1:N], —Ä–µ–∑ —Ü–µ–ª—Ç–∞–± A[1:N]
            array_matches = re.findall(r'(?:—Ä–µ–∑\s+)?(—Ü–µ–ª|–≤–µ—â|–ª–∏—Ç|–ª–æ–≥)—Ç–∞–±\s+([A-Z][a-zA-Z0-9]*)', task_init)
            for param_type, param_name in array_matches:
                if param_name not in init_params:
                    init_params.append(param_name)
                    param_types[param_name] = f'{param_type}—Ç–∞–±'
                    array_params.add(param_name)
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ task_init, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if init_params:
                params = init_params
        
        # –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ task_name –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤–∏–¥–∞ "—Ç–∏–ø –ù–∞–∑–≤–∞–Ω–∏–µ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã)"
        if not params and ('(' in task_name and ')' in task_name):
            # –ò—â–µ–º –≤—Å–µ –≤ —Å–∫–æ–±–∫–∞—Ö –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
            paren_content = re.search(r'\(([^)]+)\)', task_name)
            if paren_content:
                content = paren_content.group(1).strip()
                # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                param_parts = [p.strip() for p in content.split(',')]
                extracted_params = []
                
                for part in param_parts:
                    if not part:
                        continue
                    
                    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã: "—Ü–µ–ª X", "—Ü–µ–ª—Ç–∞–± A[1:N]", "—Å–∏–º c", etc.
                    type_param_match = re.match(r'(—Ü–µ–ª|–≤–µ—â|–ª–æ–≥|–ª–∏—Ç|—Å–∏–º|—Ü–µ–ª—Ç–∞–±|–≤–µ—â—Ç–∞–±|–ª–æ–≥—Ç–∞–±|–ª–∏—Ç—Ç–∞–±)\s+([A-Za-z][A-Za-z0-9]*)', part)
                    if type_param_match:
                        param_type, param_name = type_param_match.groups()
                        extracted_params.append(param_name)
                        param_types[param_name] = param_type
                        if param_type in ['–ª–∏—Ç', '—Å–∏–º']:
                            string_params.add(param_name)
                        elif param_type in ['—Ü–µ–ª—Ç–∞–±', '–≤–µ—â—Ç–∞–±', '–ª–æ–≥—Ç–∞–±', '–ª–∏—Ç—Ç–∞–±']:
                            array_params.add(param_name)
                    elif re.match(r'^[A-Za-z][A-Za-z0-9]*$', part):
                        # –ü—Ä–æ—Å—Ç–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                        extracted_params.append(part)
                
                if extracted_params:
                    params = extracted_params
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
        if '–∞—Ä–≥—Ä–µ–∑' in task_name:
            # –ú–∞—Å—Å–∏–≤—ã
            array_matches = re.findall(r'–∞—Ä–≥—Ä–µ–∑\s+(—Ü–µ–ª|–≤–µ—â|–ª–æ–≥|–ª–∏—Ç)—Ç–∞–±\s+([A-Z][a-zA-Z0-9]*)', task_name)
            for param_type, param_name in array_matches:
                array_params.add(param_name)
                param_types[param_name] = f'{param_type}—Ç–∞–±'
        
        # –û–±—ã—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º "–∞—Ä–≥"
        param_type_matches = re.findall(r'–∞—Ä–≥\s+(—Ü–µ–ª|–≤–µ—â|–ª–∏—Ç|–ª–æ–≥)\s+([A-Z][a-zA-Z0-9]*)', task_name)
        for param_type, param_name in param_type_matches:
            if param_name not in params:
                params.append(param_name)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            param_types[param_name] = param_type
            if param_type == '–ª–∏—Ç':
                string_params.add(param_name)
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –±–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–∞—Ä–≥"
        simple_type_matches = re.findall(r'(?<!\w)(—Ü–µ–ª|–≤–µ—â|–ª–∏—Ç|–ª–æ–≥)\s+([A-Z][a-zA-Z0-9]*)', task_name)
        for param_type, param_name in simple_type_matches:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å –∞—Ä–≥—Ä–µ–∑ –∏–ª–∏ –∞—Ä–≥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            if param_name in params:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —É–∂–µ –Ω–∞–π–¥–µ–Ω
                param_types[param_name] = param_type
                if param_type == '–ª–∏—Ç':
                    string_params.add(param_name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if len(params) >= 2 and '—Å—Ä–µ–¥–Ω' in task_todo:
            task_type = 'func_average'
        elif len(params) >= 2 and ('–º–∏–Ω–∏–º—É–º' in task_todo or '–Ω–∞–∏–º–µ–Ω—å—à' in task_todo):
            task_type = 'func_min'
        elif len(params) >= 2 and ('–º–∞–∫—Å–∏–º—É–º' in task_todo or '–Ω–∞–∏–±–æ–ª—å—à' in task_todo):
            task_type = 'func_max'
        else:
            task_type = self.detect_task_type(task)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞
        returns_value = any(prefix in task_name for prefix in ['—Ü–µ–ª ', '–≤–µ—â ', '–ª–æ–≥ ']) and ('–∞—Ä–≥' in task_name or '(' in task_name)
        # –ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        if task_type.startswith('arr_'):
            returns_value = True
        return_type = None
        if '—Ü–µ–ª ' in task_name[:10]:
            return_type = 'int'
        elif '–≤–µ—â ' in task_name[:10]:
            return_type = 'float'
        elif '–ª–æ–≥ ' in task_name[:10]:
            return_type = 'bool'
        elif '–ª–∏—Ç ' in task_name[:10]:
            return_type = 'str'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        has_string_param = '–ª–∏—Ç ' in task_name
        
        # –°—Ç–∞—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        has_X = 'X' in params
        is_function = task_type.startswith('func_') or task_type.startswith('arr_') or returns_value
        
        short_name = self.clean_task_name_for_filename(task_name, task_id, task_type)
        
        code_lines = [
            f'"""',
            f'Task {task_id}: {short_name}',
            f'',
            f'Original: {task_name}',
            f'Init: {task_init}',
            f'Todo: {task_todo}',
            f'',
            f'Kumir code:',
            f'{kumir_code}',
            f'"""',
            f'',
        ]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
        if task_type.startswith('arr_'):
            # –ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ - —Å–æ–∑–¥–∞—é—Ç –º–∞—Å—Å–∏–≤ –≤–Ω—É—Ç—Ä–∏
            if 'X' in params or has_X:
                func_signature = f'def {short_name}(N: int, X: int = 1) -> list:'
            else:
                func_signature = f'def {short_name}(N: int) -> list:'
        elif is_function or returns_value:
            # –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ
            if array_params:
                # –§—É–Ω–∫—Ü–∏—è —Å –º–∞—Å—Å–∏–≤–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Å –º–∞—Å—Å–∏–≤–∞–º–∏
                if 'X' in params:  # –ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞
                    func_signature = f'def {short_name}(N: int, A: list, X: int):'
                else:
                    func_signature = f'def {short_name}(N: int, A: list):'
            elif string_params:
                # –§—É–Ω–∫—Ü–∏—è —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
                string_param_names = [p for p in params if p in string_params]
                other_param_names = [p for p in params if p not in string_params]
                all_params = other_param_names + string_param_names
                func_signature = f'def {short_name}({", ".join(all_params)}):'
            elif len(params) == 0:
                func_signature = f'def {short_name}():'
            elif len(params) == 1:
                func_signature = f'def {short_name}({params[0]}):'
            elif len(params) == 2:
                func_signature = f'def {short_name}({params[0]}, {params[1]}):'
            elif len(params) == 3:
                func_signature = f'def {short_name}({params[0]}, {params[1]}, {params[2]}):'
            else:
                func_signature = f'def {short_name}({", ".join(params)}):'
        elif task_type.startswith('algorithm_') or task_type.startswith('array_'):
            # –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏
            if has_X:
                func_signature = f'def {short_name}(N, A, X):'
            else:
                func_signature = f'def {short_name}(N, A):'
        elif task_type == 'string_task':
            # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            if len(params) > 0:
                func_signature = f'def {short_name}({", ".join(params)}):'
            else:
                func_signature = f'def {short_name}(s: str):'
        elif task_type == 'robot_task':
            # –ó–∞–¥–∞—á–∏ —Ä–æ–±–æ—Ç–∞ - –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            func_signature = f'def {short_name}():'
        elif task_type == 'waterman_task':
            # –ó–∞–¥–∞—á–∏ –≤–æ–¥–æ–ª–µ—è - –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            func_signature = f'def {short_name}():'
        elif task_type == 'empty_task':
            # –ü—É—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            func_signature = f'def {short_name}():'
        elif has_X and returns_value:
            func_signature = f'def {short_name}(N: int, A: list, X: int):'
        elif has_X:
            func_signature = f'def {short_name}(N: int, A: list, X: int) -> list:'
        elif returns_value:
            func_signature = f'def {short_name}(N: int, A: list):'
        else:
            func_signature = f'def {short_name}(N: int, A: list) -> list:'
        
        code_lines.append(func_signature)
        code_lines.append('    """Python solution for the task."""')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        if task_type == 'robot_task':
            code_lines.extend([
                '    # –ó–∞–¥–∞—á–∞ —Ä–æ–±–æ—Ç–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã',
                f'    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–æ–±–æ—Ç–∞',
                f'    # –ö–æ–º–∞–Ω–¥—ã: {kumir_code[:100]}...' if len(kumir_code) > 100 else f'    # –ö–æ–º–∞–Ω–¥—ã: {kumir_code}',
                '    # –ü—Ä–∏–º–µ—Ä: robot.up(), robot.down(), robot.left(), robot.right(), robot.paint()',
                '    pass'
            ])
        elif task_type == 'waterman_task':
            code_lines.extend([
                '    # –ó–∞–¥–∞—á–∞ –≤–æ–¥–æ–ª–µ—è - –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–µ–π',
                f'    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –≤–æ–¥–æ–ª–µ—è',
                f'    # –ö–æ–º–∞–Ω–¥—ã: {kumir_code[:100]}...' if len(kumir_code) > 100 else f'    # –ö–æ–º–∞–Ω–¥—ã: {kumir_code}',
                '    # –ü—Ä–∏–º–µ—Ä: fill(A), empty(A), pour(A, B)',
                '    pass'
            ])
        elif task_type == 'empty_task':
            code_lines.extend([
                '    # –ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ - –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
                '    # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é',
                '    pass'
            ])
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏–ø—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Å—Ç–∞—Ä—ã–º–∏ ID)
        elif task_type == 'algorithm_binary_search':
            code_lines.extend([
                '    # Binary search algorithm',
                '    left, right = 1, min(N, 1000)',
                '    steps = 0',
                '    result = 0',
                '    ',
                '    while right >= left:',
                '        mid = (right + left) // 2',
                '        steps += 1',
                '        mid_cubed = mid * mid * mid',
                '        ',
                '        if N == mid_cubed:',
                '            result = mid',
                '            break',
                '        elif N < mid_cubed:',
                '            right = mid - 1',
                '        else:',
                '            left = mid + 1',
                '    ',
                '    return steps'
            ])
        elif task_type == 'array_reverse':
            code_lines.extend([
                '    # Reverse array elements',
                '    for i in range(N // 2):',
                '        A[i], A[N - 1 - i] = A[N - 1 - i], A[i]',
                '    return A'
            ])
        elif task_type == 'array_shift':
            code_lines.extend([
                '    # Cyclically shift array elements',
                '    if N > 1:',
                '        temp = A[N-1]',
                '        for i in range(N-1, 0, -1):',
                '            A[i] = A[i-1]',
                '        A[0] = temp',
                '    return A'
            ])
        elif task_type == 'array_sort':
            code_lines.extend([
                '    # Simple bubble sort',
                '    for i in range(N):',
                '        for j in range(N - 1 - i):',
                '            if A[j] > A[j + 1]:',
                '                A[j], A[j + 1] = A[j + 1], A[j]',
                '    return A'
            ])
        elif task_type == 'array_procedure':
            code_lines.extend([
                '    # Array procedure - implement based on task description',
                f'    # Task: {task_todo}',
                '    # TODO: Add specific implementation',
                '    return A'
            ])
        elif task_type == 'array_inc_by1':
            code_lines.extend([
                '    # –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ 1',
                '    for i in range(N):',
                '        A[i] += 1',
                '    return A'
            ])
        elif task_type == 'array_inc_byX':
            code_lines.extend([
                '    # –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ X',
                '    for i in range(N):',
                '        A[i] += X',
                '    return A'
            ])
        elif task_type == 'array_mult_by2':
            code_lines.extend([
                '    # –£–º–Ω–æ–∂–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ 2',
                '    for i in range(N):',
                '        A[i] *= 2',
                '    return A'
            ])
        elif task_type == 'array_mult_byX':
            code_lines.extend([
                '    # –£–º–Ω–æ–∂–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ X',
                '    for i in range(N):',
                '        A[i] *= X',
                '    return A'
            ])
        elif task_type == 'array_square':
            code_lines.extend([
                '    # –í–æ–∑–≤–µ—Å—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç',
                '    for i in range(N):',
                '        A[i] = A[i] ** 2',
                '    return A'
            ])
        elif task_type == 'func_complex_algorithm':
            code_lines.extend([
                '    # Complex algorithmic function',
                f'    # Task: {task_todo}',
                '    # TODO: Implement complex algorithm',
                '    return 0  # Placeholder'
            ])
        # –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        elif task_type == 'func_last_digit':
            code_lines.extend([
                '    return X % 10'
            ])
        elif task_type == 'func_tens_digit':
            code_lines.extend([
                '    return (X // 10) % 10'
            ])
        elif task_type == 'func_hundreds_digit':
            code_lines.extend([
                '    return (X // 100) % 10'
            ])
        elif task_type == 'func_cube':
            code_lines.extend([
                '    return X * X * X'
            ])
        elif task_type == 'func_square':
            code_lines.extend([
                '    return X * X'
            ])
        elif task_type == 'func_count_binary_ones':
            param_name = params[0] if params else 'X'
            code_lines.extend([
                '    # –ü–æ–¥—Å—á–µ—Ç –µ–¥–∏–Ω–∏—Ü –≤ –¥–≤–æ–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ —á–∏—Å–ª–∞',
                '    count = 0',
                f'    num = {param_name}',
                '    while num > 0:',
                '        if num % 2 == 1:',
                '            count += 1',
                '        num = num // 2',
                '    return count'
            ])
        elif task_type == 'func_count_binary_zeros':
            param_name = params[0] if params else 'X'
            code_lines.extend([
                '    # –ü–æ–¥—Å—á–µ—Ç –Ω—É–ª–µ–π –≤ –¥–≤–æ–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ —á–∏—Å–ª–∞',
                '    count = 0',
                f'    num = {param_name}',
                '    while num > 0:',
                '        if num % 2 == 0:',
                '            count += 1',
                '        num = num // 2',
                '    return count'
            ])
        elif task_type == 'func_is_palindrome':
            param_name = params[0] if params else 'N'
            code_lines.extend([
                '    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º',
                f'    s = str({param_name})',
                '    return s == s[::-1]'
            ])
        elif task_type == 'func_is_prime':
            param_name = params[0] if params else 'N'
            code_lines.extend([
                '    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ',
                f'    if {param_name} < 2:',
                '        return False',
                f'    for i in range(2, int({param_name}**0.5) + 1):',
                f'        if {param_name} % i == 0:',
                '            return False',
                '    return True'
            ])
        elif task_type == 'func_count_ones':
            code_lines.extend([
                '    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—Ü –≤ –º–∞—Å—Å–∏–≤–µ',
                '    count = 0',
                '    for i in range(N):',
                '        if A[i] == 1:',
                '            count += 1',
                '    return count'
            ])
        elif task_type == 'func_count_elements':
            code_lines.extend([
                '    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —É—Å–ª–æ–≤–∏—é',
                '    count = 0',
                '    for i in range(N):',
                '        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ',
                '        if True:  # Placeholder',
                '            count += 1',
                '    return count'
            ])
        elif task_type == 'func_sum_array':
            code_lines.extend([
                '    # –°—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞',
                '    total = 0',
                '    for i in range(N):',
                '        total += A[i]',
                '    return total'
            ])
        elif task_type == 'func_max_array':
            code_lines.extend([
                '    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞',
                '    if N == 0:',
                '        return 0',
                '    max_val = A[0]',
                '    for i in range(1, N):',
                '        if A[i] > max_val:',
                '            max_val = A[i]',
                '    return max_val'
            ])
        elif task_type == 'func_min_array':
            code_lines.extend([
                '    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞',
                '    if N == 0:',
                '        return 0',
                '    min_val = A[0]',
                '    for i in range(1, N):',
                '        if A[i] < min_val:',
                '            min_val = A[i]',
                '    return min_val'
            ])
        elif task_type == 'func_round':
            code_lines.extend([
                '    from math import floor',
                '    if X - floor(X) >= 0.5:',
                '        return int(X) + 1',
                '    else:',
                '        return int(X)'
            ])
        elif task_type == 'func_round_up':
            code_lines.extend([
                '    import math',
                '    return math.ceil(X)'
            ])
        elif task_type == 'func_is_prime':
            code_lines.extend([
                '    if X < 2:',
                '        return 0',
                '    for i in range(2, int(X**0.5) + 1):',
                '        if X % i == 0:',
                '            return 0',
                '    return 1'
            ])
        elif task_type == 'func_is_palindrome':
            code_lines.extend([
                '    s = str(X)',
                '    return 1 if s == s[::-1] else 0'
            ])
        elif task_type == 'func_average':
            # –°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
            if len(params) == 2:
                code_lines.extend([
                    f'    return ({params[0]} + {params[1]}) / 2'
                ])
            elif len(params) == 3:
                code_lines.extend([
                    f'    return ({params[0]} + {params[1]} + {params[2]}) / 3'
                ])
            else:
                code_lines.extend([
                    f'    return sum([{", ".join(params)}]) / {len(params)}'
                ])
        elif task_type == 'func_min':
            # –ú–∏–Ω–∏–º—É–º
            code_lines.extend([
                f'    return min({", ".join(params)})'
            ])
        elif task_type == 'func_max':
            # –ú–∞–∫—Å–∏–º—É–º
            code_lines.extend([
                f'    return max({", ".join(params)})'
            ])
        elif task_type == 'func_ends_with_zero':
            # –û–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–ª—å
            code_lines.extend([
                '    return 1 if N % 10 == 0 else 0'
            ])
        elif task_type == 'func_lucky_ticket':
            # –°—á–∞—Å—Ç–ª–∏–≤—ã–π –±–∏–ª–µ—Ç
            code_lines.extend([
                '    # –°—á–∞—Å—Ç–ª–∏–≤—ã–π –±–∏–ª–µ—Ç - —Å—É–º–º–∞ –ø–µ—Ä–≤—ã—Ö 3 —Ü–∏—Ñ—Ä == —Å—É–º–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3',
                '    s = str(N).zfill(6)  # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 6 —Ü–∏—Ñ—Ä',
                '    if len(s) != 6:',
                '        return 0',
                '    first_sum = sum(int(d) for d in s[:3])',
                '    last_sum = sum(int(d) for d in s[3:])',
                '    return 1 if first_sum == last_sum else 0'
            ])
        elif task_type == 'func_from_binary':
            # –ò–∑ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            code_lines.extend([
                '    # Convert binary string to integer',
                '    return int(s, 2)'
            ])
        elif task_type == 'func_from_octal':
            # –ò–∑ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            code_lines.extend([
                '    # Convert octal string to integer',
                '    return int(s, 8)'
            ])
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        elif task_type == 'func_generic':
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
            if '—Å—É–º–º' in task_todo.lower() and '–Ω–∞—Ç—É—Ä' in task_todo.lower():
                code_lines.extend([
                    '    # Sum of natural numbers from 1 to X',
                    '    return sum(range(1, X + 1))'
                ])
            elif '–ø—Ä–æ–∏–∑–≤–µ–¥' in task_todo.lower() or '—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª' in task_todo.lower():
                code_lines.extend([
                    '    # Factorial or product',
                    '    result = 1',
                    '    for i in range(1, X + 1):',
                    '        result *= i',
                    '    return result'
                ])
            elif '—á–µ—Ç–Ω' in task_todo.lower():
                code_lines.extend([
                    '    # Check if even',
                    '    return 1 if X % 2 == 0 else 0'
                ])
            elif '–Ω–µ—á–µ—Ç–Ω' in task_todo.lower():
                code_lines.extend([
                    '    # Check if odd',
                    '    return 1 if X % 2 != 0 else 0'
                ])
            elif '–ø–æ–ª–æ–∂–∏—Ç' in task_todo.lower():
                code_lines.extend([
                    '    # Check if positive',
                    '    return 1 if X > 0 else 0'
                ])
            elif '–æ—Ç—Ä–∏—Ü–∞—Ç' in task_todo.lower():
                code_lines.extend([
                    '    # Check if negative',
                    '    return 1 if X < 0 else 0'
                ])
            elif '—Ü–∏—Ñ—Ä' in task_todo.lower() and '—Å—É–º–º' in task_todo.lower():
                code_lines.extend([
                    '    # Sum of digits',
                    '    total = 0',
                    '    x = abs(X)',
                    '    while x > 0:',
                    '        total += x % 10',
                    '        x //= 10',
                    '    return total'
                ])
            elif '—Ü–∏—Ñ—Ä' in task_todo.lower() and ('–∫–æ–ª–∏—á–µ—Å—Ç' in task_todo.lower() or '—Å–∫–æ–ª—å–∫' in task_todo.lower()):
                code_lines.extend([
                    '    # Count of digits',
                    '    if X == 0:',
                    '        return 1',
                    '    count = 0',
                    '    x = abs(X)',
                    '    while x > 0:',
                    '        count += 1',
                    '        x //= 10',
                    '    return count'
                ])
            else:
                # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
                code_lines.extend([
                    '    # TODO: Implement based on task description',
                    f'    # Task: {task_todo}',
                    '    return 0  # Placeholder'
                ])
        # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        elif task_type == 'string_task' or string_params:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            task_lower = task_todo.lower()
            name_lower = task_name.lower()
            
            if ('–ø–µ—Ä–≤—ã–π' in task_lower or '–ø–µ—Ä–≤—ã–π' in name_lower) and '—Å–∏–º–≤–æ–ª' in (task_lower + name_lower):
                code_lines.extend([
                    '    # Return first character',
                    '    return s[0] if s else ""'
                ])
            elif ('–ø–æ—Å–ª–µ–¥–Ω' in task_lower or '–ø–æ—Å–ª–µ–¥–Ω' in name_lower) and '—Å–∏–º–≤–æ–ª' in (task_lower + name_lower):
                code_lines.extend([
                    '    # Return last character',
                    '    return s[-1] if s else ""'
                ])
            elif '–¥–ª–∏–Ω' in task_lower or '–¥–ª–∏–Ω' in name_lower:
                code_lines.extend([
                    '    # String length',
                    '    return len(s)'
                ])
            elif '—Å–∏–º–≤–æ–ª' in task_lower and '–Ω–æ–º–µ—Ä' in task_lower:
                code_lines.extend([
                    '    # Character at position',
                    '    if 1 <= n <= len(s):',
                    '        return s[n-1]  # Convert to 0-based index',
                    '    return ""'
                ])
            elif '–ø–æ–∏—Å–∫' in task_lower or '–Ω–∞–π—Ç' in task_lower:
                code_lines.extend([
                    '    # Find substring',
                    '    pos = s.find(substr)',
                    '    return pos + 1 if pos != -1 else 0  # Convert to 1-based index'
                ])
            elif '–∑–∞–º–µ–Ω' in task_lower:
                code_lines.extend([
                    '    # Replace substring',
                    '    return s.replace(old_substr, new_substr)'
                ])
            elif '—É–¥–∞–ª' in task_lower:
                code_lines.extend([
                    '    # Remove substring',
                    '    return s.replace(substr, "")'
                ])
            elif '–≤—Å—Ç–∞–≤–∫' in task_lower:
                code_lines.extend([
                    '    # Insert substring',
                    '    pos = pos - 1  # Convert to 0-based index',
                    '    return s[:pos] + substr + s[pos:]'
                ])
            elif '–æ–±—Ä–∞—Ç' in task_lower or '—Ä–µ–≤–µ—Ä—Å' in task_lower:
                code_lines.extend([
                    '    # Reverse string',
                    '    return s[::-1]'
                ])
            elif '–∑–∞–≥–ª–∞–≤–Ω' in task_lower or '–±–æ–ª—å—à' in task_lower:
                code_lines.extend([
                    '    # Convert to uppercase',
                    '    return s.upper()'
                ])
            elif '—Å—Ç—Ä–æ—á–Ω' in task_lower or '–º–∞–ª–µ–Ω—å' in task_lower:
                code_lines.extend([
                    '    # Convert to lowercase',
                    '    return s.lower()'
                ])
            elif '—Å–ª–æ–≤' in task_lower and ('–∫–æ–ª–∏—á–µ—Å—Ç' in task_lower or '—Å–∫–æ–ª—å–∫' in task_lower):
                code_lines.extend([
                    '    # Count words',
                    '    return len(s.split())'
                ])
            else:
                # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫
                code_lines.extend([
                    '    # TODO: Implement string operation',
                    f'    # Task: {task_todo}',
                    '    return s  # Placeholder'
                ])
        elif task_id == "10" or task_type == 'arr_fill_zeros':  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω—É–ª—è–º–∏
            code_lines.extend([
                '    A = [0] * N  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤',
                '    for i in range(N):',
                '        A[i] = 0',
                '    return A'
            ])
        elif task_type == 'arr_fill_natural':  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
            code_lines.extend([
                '    A = [0] * N  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤',
                '    for i in range(N):',
                '        A[i] = i + 1',
                '    return A'
            ])
        elif task_type == 'arr_fill_fibonacci':  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å —á–∏—Å–ª–∞–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏
            code_lines.extend([
                '    A = [0] * N  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤',
                '    if N > 0:',
                '        A[0] = 1',
                '    if N > 1:',
                '        A[1] = 1',
                '    for i in range(2, N):',
                '        A[i] = A[i-1] + A[i-2]',
                '    return A'
            ])
        elif task_type == 'arr_fill_powers2':  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ç–µ–ø–µ–Ω—è–º–∏ –¥–≤–æ–π–∫–∏
            code_lines.extend([
                '    A = [0] * N  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤',
                '    for i in range(N):',
                '        A[i] = 2 ** i',
                '    return A'
            ])
        elif task_type == 'arr_fill_pyramid':  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≥–æ—Ä–∫–æ–π
            code_lines.extend([
                '    A = [0] * N  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤',
                '    # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≥–æ—Ä–∫–æ–π: 1, 2, 1, 2, 3, 2, 1, ...',
                '    pos = 0',
                '    level = 1',
                '    while pos < N:',
                '        # –ü–æ–¥—ä–µ–º',
                '        for i in range(1, level + 1):',
                '            if pos < N:',
                '                A[pos] = i',
                '                pos += 1',
                '        # –°–ø—É—Å–∫',
                '        for i in range(level - 1, 0, -1):',
                '            if pos < N:',
                '                A[pos] = i',
                '                pos += 1',
                '        level += 1',
                '    return A'
            ])
        elif task_type == 'arr_fill_generic':  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å (–æ–±—â–∏–π —Å–ª—É—á–∞–π)
            code_lines.extend([
                '    A = [0] * N  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤',
                '    # –û–±—â–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞',
                '    for i in range(N):',
                '        A[i] = i + 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏',
                '    return A'
            ])
        elif task_type == 'arr_modify_increase':  # –£–≤–µ–ª–∏—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
            code_lines.extend([
                '    A = list(range(1, N+1))  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
                '    for i in range(N):',
                '        A[i] += X  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ X',
                '    return A'
            ])
        elif task_type == 'arr_modify_multiply':  # –£–º–Ω–æ–∂–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
            code_lines.extend([
                '    A = list(range(1, N+1))  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
                '    for i in range(N):',
                '        A[i] *= X  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ X',
                '    return A'
            ])
        elif task_type == 'arr_modify_square':  # –í–æ–∑–≤–µ—Å—Ç–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç
            code_lines.extend([
                '    A = list(range(1, N+1))  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
                '    for i in range(N):',
                '        A[i] = A[i] ** 2',
                '    return A'
            ])
        elif task_type == 'arr_find_max':  # –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º—É–º
            code_lines.extend([
                '    A = list(range(1, N+1))  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
                '    max_val = A[0]',
                '    for i in range(1, N):',
                '        if A[i] > max_val:',
                '            max_val = A[i]',
                '    return max_val'
            ])
        elif task_type == 'arr_find_min':  # –ù–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º
            code_lines.extend([
                '    A = list(range(1, N+1))  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
                '    min_val = A[0]',
                '    for i in range(1, N):',
                '        if A[i] < min_val:',
                '            min_val = A[i]',
                '    return min_val'
            ])
        elif task_type == 'arr_find_value':  # –ù–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
            code_lines.extend([
                '    A = list(range(1, N+1))  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
                '    for i in range(N):',
                '        if A[i] == X:',
                '            return i + 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é (1-indexed)',
                '    return 0  # –ù–µ –Ω–∞–π–¥–µ–Ω–æ'
            ])
        elif task_type == 'arr_count':  # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
            code_lines.extend([
                '    A = list(range(1, N+1))  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
                '    count = 0',
                '    for i in range(N):',
                '        if A[i] == X:  # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–≤–Ω—ã–µ X',
                '            count += 1',
                '    return count'
            ])
        elif task_type == 'arr_sum':  # –°—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            code_lines.extend([
                '    A = list(range(1, N+1))  # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
                '    total = 0',
                '    for i in range(N):',
                '        total += A[i]',
                '    return total'
            ])
        elif task_id == "11":  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = i + 1',
                '    return A'
            ])
        elif task_id == "12":  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç X
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = X + i',
                '    return A'
            ])
        elif task_id == "13":  # –ü–ª—é—Å 5
            code_lines.extend([
                '    A[0] = X',
                '    for i in range(1, N):',
                '        A[i] = A[i-1] + 5',
                '    return A'
            ])
        elif task_id == "14":  # –§–∏–±–æ–Ω–∞—á—á–∏
            code_lines.extend([
                '    if N >= 1:',
                '        A[0] = 1',
                '    if N >= 2:',
                '        A[1] = 1',
                '    for i in range(2, N):',
                '        A[i] = A[i-1] + A[i-2]',
                '    return A'
            ])
        elif task_id == "15":  # –°—Ç–µ–ø–µ–Ω–∏ 2
            code_lines.extend([
                '    A[N-1] = 1',
                '    for i in range(N-2, -1, -1):',
                '        A[i] = 2 * A[i+1]',
                '    return A'
            ])
        elif task_id == "16":  # –ì–æ—Ä–∫–∞
            code_lines.extend([
                '    c = N // 2',
                '    A[c] = X',
                '    for i in range(c-1, -1, -1):',
                '        A[i] = A[i+1] - 1',
                '    for i in range(c+1, N):',
                '        A[i] = A[i-1] - 1',
                '    return A'
            ])
        elif task_id == "20":  # –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 1
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = A[i] + 1',
                '    return A'
            ])
        elif task_id == "21":  # –£–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 2
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = A[i] * 2',
                '    return A'
            ])
        elif task_id == "22":  # –ö–≤–∞–¥—Ä–∞—Ç
            code_lines.extend([
                '    for i in range(N):',
                '        A[i] = A[i] * A[i]',
                '    return A'
            ])
        elif task_id == "30":  # –ú–∞–∫—Å–∏–º—É–º
            code_lines.extend([
                '    max_val = A[0]',
                '    for i in range(N):',
                '        if A[i] > max_val:',
                '            max_val = A[i]',
                '    return max_val'
            ])
        elif task_id == "31":  # –ú–∏–Ω–∏–º—É–º
            code_lines.extend([
                '    min_val = A[0]',
                '    for i in range(N):',
                '        if A[i] < min_val:',
                '            min_val = A[i]',
                '    return min_val'
            ])
        elif task_id == "40":  # –°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü
            code_lines.extend([
                '    count = 0',
                '    for i in range(N):',
                '        if A[i] == 1:',
                '            count += 1',
                '    return count'
            ])
        elif task_id == "41":  # –°–∫–æ–ª—å–∫–æ —Ä–∞–≤–Ω—ã—Ö X
            code_lines.extend([
                '    count = 0',
                '    for i in range(N):',
                '        if A[i] == X:',
                '            count += 1',
                '    return count'
            ])
        elif task_id == "50":  # –°—É–º–º–∞ –≤—Å–µ—Ö
            code_lines.extend([
                '    total = 0',
                '    for i in range(N):',
                '        total += A[i]',
                '    return total'
            ])
        elif task_id == "60":  # –ù–æ–º–µ—Ä X
            code_lines.extend([
                '    for i in range(N):',
                '        if A[i] == X:',
                '            return i + 1  # 1-based index',
                '    return -1'
            ])
        else:
            # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            code_lines.extend([
                '    # TODO: Implement solution',
                f'    # Task: {task_todo}',
                '    pass'
            ])
        
        # –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        code_lines.extend([
            '',
            '',
            'def test_solution():',
            '    """Test the solution."""',
        ])
        
        # –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        if task_type.startswith('array_'):
            # –ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏ (array_inc_by1, array_mult_by2, etc.)
            if 'X' in params:
                code_lines.extend([
                    '    N = 5',
                    '    A = [1, 2, 3, 4, 5]',
                    '    X = 10',
                    f'    result = {short_name}(N, A.copy(), X)',
                    '    print(f"Input: N={N}, A={A}, X={X}")',
                    '    print(f"Result: {result}")',
                    '    return result'
                ])
            else:
                code_lines.extend([
                    '    N = 5',
                    '    A = [1, 2, 3, 4, 5]',
                    f'    result = {short_name}(N, A.copy())',
                    '    print(f"Input: N={N}, A={A}")',
                    '    print(f"Result: {result}")',
                    '    return result'
                ])
        elif task_type.startswith('arr_'):
            # –ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ - —Å–æ–∑–¥–∞—é—Ç –º–∞—Å—Å–∏–≤ —Å–∞–º–∏
            if 'X' in params or has_X:
                code_lines.extend([
                    '    N = 5',
                    '    X = 3',
                    f'    result = {short_name}(N, X)',
                    '    print(f"Input: N={N}, X={X}")',
                    '    print(f"Result: {result}")',
                    '    return result'
                ])
            else:
                code_lines.extend([
                    '    N = 5',
                    f'    result = {short_name}(N)',
                    '    print(f"Input: N={N}")',
                    '    print(f"Result: {result}")',
                    '    return result'
                ])
        elif is_function or returns_value:
            # –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ
            if len(params) == 0:
                code_lines.extend([
                    f'    result = {short_name}()',
                    '    print(f"Result: {result}")',
                    '    return True'
                ])
            elif len(params) == 1:
                param_name = params[0]
                if param_name in string_params or param_types.get(param_name) in ['–ª–∏—Ç', '—Å–∏–º']:
                    # –°—Ç—Ä–æ–∫–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                    code_lines.extend([
                        '    test_strings = ["hello", "Python", "test", "A", ""]',
                        f'    for {param_name} in test_strings:',
                        f'        result = {short_name}({param_name})',
                        f'        print(f"Input: {{{param_name}}}, Result: {{result}}")',
                        '    return True'
                    ])
                else:
                    # –ß–∏—Å–ª–æ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                    code_lines.extend([
                        '    test_values = [0, 1, 5, 10, 123]',
                        f'    for {param_name} in test_values:',
                        f'        result = {short_name}({param_name})',
                        f'        print(f"Input: {{{param_name}}}, Result: {{result}}")',
                        '    return True'
                    ])
            elif len(params) == 2:
                param1, param2 = params[0], params[1]
                if param1 in array_params or param2 in array_params:
                    # –ï—Å—Ç—å –º–∞—Å—Å–∏–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ—Å—Ç —Å –º–∞—Å—Å–∏–≤–æ–º
                    code_lines.extend([
                        '    N = 5',
                        '    A = [3, 1, 4, 1, 5]',
                        f'    result = {short_name}(N, A)',
                        '    print(f"Input: N={N}, A={A}")',
                        '    print(f"Result: {result}")',
                        '    return result'
                    ])
                elif param1 in string_params or param2 in string_params:
                    # –ï—Å—Ç—å —Å—Ç—Ä–æ–∫–∞
                    code_lines.extend([
                        '    test_cases = [("hello", 5), ("Python", 3), ("test", 2)]',
                        f'    for {param1}, {param2} in test_cases:',
                        f'        result = {short_name}({param1}, {param2})',
                        f'        print(f"Input: {{{param1}}}, {{{param2}}}, Result: {{result}}")',
                        '    return True'
                    ])
                else:
                    # –î–≤–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    code_lines.extend([
                        '    test_cases = [(3, 5), (10, 20), (1, 1), (0, 10)]',
                        f'    for {param1}, {param2} in test_cases:',
                        f'        result = {short_name}({param1}, {param2})',
                        f'        print(f"Input: {{{param1}}}, {{{param2}}}, Result: {{result}}")',
                        '    return True'
                    ])
            elif len(params) == 3:
                param1, param2, param3 = params[0], params[1], params[2]
                if 'A' in params and 'N' in params:
                    # –ú–∞—Å—Å–∏–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                    code_lines.extend([
                        '    N = 5',
                        '    A = [3, 1, 4, 1, 5]',
                        '    X = 1',
                        f'    result = {short_name}(N, A, X)',
                        '    print(f"Input: N={N}, A={A}, X={X}")',
                        '    print(f"Result: {result}")',
                        '    return result'
                    ])
                else:
                    # –¢—Ä–∏ –æ–±—ã—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    code_lines.extend([
                        '    test_cases = [(1, 2, 3), (5, 10, 15), (0, 1, 2)]',
                        f'    for {param1}, {param2}, {param3} in test_cases:',
                        f'        result = {short_name}({param1}, {param2}, {param3})',
                        f'        print(f"Input: {{{param1}}}, {{{param2}}}, {{{param3}}}, Result: {{result}}")',
                        '    return True'
                    ])
            else:
                # –ë–æ–ª–µ–µ 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –æ–±—â–∏–π —Å–ª—É—á–∞–π
                params_str = ", ".join(params)
                code_lines.extend([
                    f'    # Test with parameters: {params_str}',
                    f'    # TODO: Implement test for {short_name}({params_str})',
                    '    return True'
                ])
        
        elif task_type == 'string_task':
            # –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–∞–¥–∞—á
            code_lines.extend([
                '    test_strings = ["hello", "Python", "test string", "ABC", ""]',
                '    for s in test_strings:',
            ])
            
            if len(params) > 1:
                # –ú–Ω–æ–≥–æ–ø–∞—Ä–∞–º–µ—Ç—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                code_lines.extend([
                    f'        result = {short_name}(s, "test")',  # –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    '        print(f"Input: \'{s}\', Result: {result}")'
                ])
            else:
                code_lines.extend([
                    f'        result = {short_name}(s)',
                    '        print(f"Input: \'{s}\', Result: {result}")'
                ])
            
            code_lines.extend([
                '    return True'
            ])
        
        elif task_type == 'robot_task':
            # –î–ª—è –∑–∞–¥–∞—á —Ä–æ–±–æ—Ç–∞
            code_lines.extend([
                '    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–æ–±–æ—Ç–∞',
                f'    {short_name}()',
                '    print("Robot task completed successfully!")',
                '    return True'
            ])
        
        elif task_type == 'waterman_task':
            # –î–ª—è –∑–∞–¥–∞—á –≤–æ–¥–æ–ª–µ—è
            code_lines.extend([
                '    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –≤–æ–¥–æ–ª–µ—è',
                f'    {short_name}()',
                '    print("Waterman task completed successfully!")',
                '    return True'
            ])
        elif task_type == 'empty_task':
            # –î–ª—è –ø—É—Å—Ç—ã—Ö –∑–∞–¥–∞—á
            code_lines.extend([
                '    # –ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ - –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                f'    {short_name}()',
                '    print("Empty task completed!")',
                '    return True'
            ])
        else:
            # –û–±—â–∏–π —Å–ª—É—á–∞–π –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            if 'A' in params or any('–º–∞—Å—Å–∏–≤' in str(p) for p in [task_name, task_todo]):
                # –ó–∞–¥–∞—á–∞ —Å –º–∞—Å—Å–∏–≤–æ–º
                code_lines.extend([
                    '    N = 5',
                    '    A = [1, 2, 3, 4, 5]',
                ])
                
                if 'X' in params:
                    code_lines.extend([
                        '    X = 3',
                        f'    result = {short_name}(N, A.copy(), X)',
                        '    print(f"Input: N={N}, A={A}, X={X}")',
                    ])
                elif len(params) >= 2:
                    code_lines.extend([
                        f'    result = {short_name}(N, A.copy())',
                        '    print(f"Input: N={N}, A={A}")',
                    ])
                else:
                    code_lines.extend([
                        f'    result = {short_name}(N)',
                        '    print(f"Input: N={N}")',
                    ])
                
                code_lines.extend([
                    '    print(f"Result: {result}")',
                    '    return result'
                ])
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –±–µ–∑ –º–∞—Å—Å–∏–≤–∞
                code_lines.extend([
                    '    # Simple test case',
                    f'    result = {short_name}()',
                    '    print(f"Result: {result}")',
                    '    return result'
                ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        code_lines.extend([
            '',
            '',
            'if __name__ == "__main__":',
            '    test_solution()'
        ])
        
        return '\n'.join(code_lines)
    
    def generate_all_python_solutions(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á."""
        print("üêç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python —Ä–µ—à–µ–Ω–∏–π...")
        
        try:
            with open(self.tasks_json_file, 'r', encoding='utf-8') as f:
                tasks = json.load(f)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {self.tasks_json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        success_count = 0
        for task in tasks:
            task_id = task['task_id']
            task_type = self.detect_task_type(task)
            short_name = self.clean_task_name_for_filename(task['task_name'], task_id, task_type)
            
            python_code = self.generate_python_solution(task)
            
            filename = f"{task_id}_{short_name}.py"
            filepath = self.python_dir / filename
            
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(python_code)
                success_count += 1
                print(f"  ‚úÖ {filename}")
            except Exception as e:
                print(f"  ‚ùå {filename}: {e}")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {success_count}/{len(tasks)} Python —Ñ–∞–π–ª–æ–≤")
        return success_count == len(tasks)
    
    def test_all_solutions(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ Python —Ä–µ—à–µ–Ω–∏—è."""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python —Ä–µ—à–µ–Ω–∏–π...")
        
        python_files = list(self.python_dir.glob("*.py"))
        
        results = {
            "total": len(python_files),
            "success": 0,
            "failed": [],
            "details": []
        }
        
        for py_file in sorted(python_files):
            try:
                result = subprocess.run([
                    sys.executable, str(py_file)
                ], capture_output=True, text=True, timeout=5)
                
                if result.returncode == 0:
                    results["success"] += 1
                    results["details"].append({
                        "file": py_file.name,
                        "status": "success",
                        "output": result.stdout.strip()
                    })
                    print(f"  ‚úÖ {py_file.name}")
                else:
                    results["failed"].append(py_file.name)
                    results["details"].append({
                        "file": py_file.name,
                        "status": "error",
                        "error": result.stderr.strip()
                    })
                    print(f"  ‚ùå {py_file.name}")
                    
            except subprocess.TimeoutExpired:
                results["failed"].append(py_file.name)
                results["details"].append({
                    "file": py_file.name,
                    "status": "timeout",
                    "error": "Timeout > 5 seconds"
                })
                print(f"  ‚è∞ {py_file.name}")
            except Exception as e:
                results["failed"].append(py_file.name)
                results["details"].append({
                    "file": py_file.name,
                    "status": "exception",
                    "error": str(e)
                })
                print(f"  üí• {py_file.name}")
        
        success_rate = (results["success"] / results["total"]) * 100 if results["total"] > 0 else 0
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results['success']}/{results['total']} ({success_rate:.1f}%)")
        
        return results
    
    def create_comparison_framework(self, test_results: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è Python –∏ –ö–£–ú–ò–† —Ä–µ—à–µ–Ω–∏–π."""
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_script = f'''#!/usr/bin/env python3
"""
Framework for comparing Python and Kumir solutions.
Generated automatically by KumirToPythonPipeline.
"""

import sys
import json
from pathlib import Path

# Add python solutions to path
sys.path.append(str(Path(__file__).parent / "python_solutions"))

def load_tasks():
    """Load task data."""
    with open("tasks_data.json", "r", encoding="utf-8") as f:
        return json.load(f)

def compare_solutions():
    """Compare Python and Kumir solutions."""
    tasks = load_tasks()
    
    print("üîç Comparison Framework Ready")
    print("=" * 50)
    
    for task in tasks:
        task_id = task["task_id"]
        print(f"Task {{task_id}}: {{task['task_name']}}")
        
        # TODO: Implement Kumir interpreter integration
        # kumir_result = run_kumir_code(task["kumir_code"], test_data)
        # python_result = run_python_solution(task_id, test_data)
        # assert kumir_result == python_result
    
    print("\\n‚úÖ Framework ready for Kumir integration")

if __name__ == "__main__":
    compare_solutions()
'''
        
        try:
            with open(self.output_dir / "compare_solutions.py", 'w', encoding='utf-8') as f:
                f.write(comparison_script)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report_content = f"""# Kumir to Python Pipeline Report

## Summary
- **Input XML**: {self.xml_file_path}
- **Total Tasks**: {test_results['total']}
- **Successful Tests**: {test_results['success']}
- **Success Rate**: {(test_results['success']/test_results['total']*100):.1f}%

## Generated Files
- `tasks_data.json` - Parsed task data
- `python_solutions/` - Python implementations ({test_results['total']} files)
- `compare_solutions.py` - Comparison framework

## Test Results
"""
        
        for detail in test_results['details']:
            status_emoji = "‚úÖ" if detail['status'] == 'success' else "‚ùå"
            report_content += f"- {status_emoji} `{detail['file']}` - {detail['status']}\n"
        
        if test_results['failed']:
            report_content += f"\n## Failed Tests\n"
            for failed in test_results['failed']:
                report_content += f"- {failed}\n"
        
        report_content += f"""
## Usage
1. **Testing Python solutions**:
   ```bash
   python compare_solutions.py
   ```

2. **Integration with Kumir interpreter**:
   - Implement `run_kumir_code()` function
   - Add test data generation
   - Run comparison tests

## Next Steps
- Integrate with your Kumir interpreter
- Add comprehensive test data
- Implement automated comparison testing
"""
        
        try:
            with open(self.reports_dir / "pipeline_report.md", 'w', encoding='utf-8') as f:
                f.write(report_content)
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {self.reports_dir}/pipeline_report.md")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    def run_full_pipeline(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ Kumir to Python Pipeline")
        print("=" * 60)
        
        # –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ XML
        if not self.parse_kumir_xml_to_json():
            return False
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python —Ä–µ—à–µ–Ω–∏–π
        if not self.generate_all_python_solutions():
            return False
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
        test_results = self.test_all_solutions()
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if not self.create_comparison_framework(test_results):
            return False
        
        print("\n" + "=" * 60)
        print("üéâ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ: {self.output_dir}")
        print(f"üìä –ì–æ—Ç–æ–≤–æ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é: {test_results['success']}/{test_results['total']} –∑–∞–¥–∞—á")
        
        return True


    def convert_kumir_to_python(self, kumir_code: str) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ö–£–ú–ò–†–æ–≤—Å–∫–æ–≥–æ –∫–æ–¥–∞ –≤ Python."""
        lines = kumir_code.split('\n')
        python_lines = []
        
        for line in lines:
            line = line.strip()
            if not line or line in ['–Ω–∞—á', '–∫–æ–Ω']:
                continue
                
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
            line = line.replace('–∑–Ω–∞—á:=', 'result = ')
            line = line.replace(':=', ' = ')
            line = line.replace('mod(', '(')
            line = line.replace('div(', '(')
            line = line.replace(',', ' // ')
            line = line.replace('mod', '%')
            line = line.replace('div', '//')
            line = line.replace('–µ—Å–ª–∏', 'if')
            line = line.replace('—Ç–æ', ':')
            line = line.replace('–≤—Å–µ', '')
            line = line.replace('–¥–ª—è', 'for')
            line = line.replace('–æ—Ç', 'in range(')
            line = line.replace('–¥–æ', ',')
            line = line.replace('–Ω—Ü', ':')
            line = line.replace('–∫—Ü', '')
            
            if line:
                python_lines.append(line)
        
        return '\n    '.join(python_lines) if python_lines else 'pass'
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) != 2:
        print("Usage: python kumir_pipeline.py <xml_file_path>")
        print("Example: python kumir_pipeline.py pol_kurs.xml")
        sys.exit(1)
    
    xml_file = sys.argv[1]
    
    if not os.path.exists(xml_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {xml_file}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º pipeline
    pipeline = KumirToPythonPipeline(xml_file)
    success = pipeline.run_full_pipeline()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
