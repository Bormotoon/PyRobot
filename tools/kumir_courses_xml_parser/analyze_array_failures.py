#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤.
–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è.
"""

import os
import re
import subprocess
import json
from pathlib import Path


def analyze_file(file_path):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Python –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫."""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path.name}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        func_match = re.search(r'def (\w+)\((.*?)\):', content)
        if func_match:
            func_name = func_match.group(1)
            func_params = func_match.group(2).strip()
            print(f"   –§—É–Ω–∫—Ü–∏—è: {func_name}({func_params})")
        
        # –ü–æ–∏—Å–∫ –≤—ã–∑–æ–≤–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö
        test_calls = re.findall(r'assert.*?(\w+)\((.*?)\)', content)
        if test_calls:
            print(f"   –¢–µ—Å—Ç—ã:")
            for call_func, call_params in test_calls:
                print(f"     {call_func}({call_params})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if func_match and test_calls:
            func_params_count = len([p for p in func_params.split(',') if p.strip()]) if func_params else 0
            for call_func, call_params in test_calls:
                call_params_count = len([p for p in call_params.split(',') if p.strip()]) if call_params else 0
                if call_func == func_name and func_params_count != call_params_count:
                    print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ ({func_params_count}) –∏ –≤—ã–∑–æ–≤–∞ ({call_params_count})")
        
        # –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º
        if 'N' in content and 'A' not in func_params:
            print(f"   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è N, –Ω–æ A –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
            
        if 'range(N)' in content and 'N' not in func_params:
            print(f"   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è range(N), –Ω–æ N –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")


def find_failed_tests():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–∞—Å—Å–∏–≤–æ–≤."""
    solutions_dir = Path("kumir_python_solutions/python_solutions")
    
    if not solutions_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ kumir_python_solutions/python_solutions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []
    
    failed_files = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏ –ª–æ–≤–∏–º –Ω–µ—É–¥–∞—á–Ω—ã–µ
    for py_file in solutions_dir.glob("*.py"):
        try:
            result = subprocess.run(['python', str(py_file)], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode != 0:
                failed_files.append(py_file)
        except subprocess.TimeoutExpired:
            failed_files.append(py_file)
        except Exception:
            failed_files.append(py_file)
    
    return failed_files


def categorize_failures(failed_files):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º."""
    categories = {
        'signature_mismatch': [],
        'missing_params': [],
        'array_problems': [],
        'other': []
    }
    
    for file_path in failed_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
            if 'array_fill' in file_path.name or 'array_proc' in file_path.name:
                func_match = re.search(r'def (\w+)\((.*?)\):', content)
                test_calls = re.findall(r'assert.*?(\w+)\((.*?)\)', content)
                
                if func_match and test_calls:
                    func_params = func_match.group(2).strip()
                    func_params_count = len([p for p in func_params.split(',') if p.strip()]) if func_params else 0
                    
                    for call_func, call_params in test_calls:
                        call_params_count = len([p for p in call_params.split(',') if p.strip()]) if call_params else 0
                        if func_params_count != call_params_count:
                            categories['signature_mismatch'].append(file_path)
                            break
                    else:
                        if 'N' in content and 'N' not in func_params:
                            categories['missing_params'].append(file_path)
                        else:
                            categories['array_problems'].append(file_path)
                else:
                    categories['array_problems'].append(file_path)
            else:
                categories['other'].append(file_path)
                
        except Exception:
            categories['other'].append(file_path)
    
    return categories


def main():
    print("üîç –ê–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
    print("üïµÔ∏è –ü–æ–∏—Å–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    failed_files = find_failed_tests()
    
    if not failed_files:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return
    
    print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(failed_files)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    categories = categorize_failures(failed_files)
    
    print(f"\nüìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º:")
    print(f"   –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä: {len(categories['signature_mismatch'])}")
    print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(categories['missing_params'])}")
    print(f"   –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏: {len(categories['array_problems'])}")
    print(f"   –î—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {len(categories['other'])}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    
    # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–∏–≥–Ω–∞—Ç—É—Ä
    if categories['signature_mismatch']:
        print(f"\nüö® –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä ({len(categories['signature_mismatch'])} —Ñ–∞–π–ª–æ–≤):")
        for file_path in categories['signature_mismatch'][:10]:  # –ü–µ—Ä–≤—ã–µ 10
            analyze_file(file_path)
    
    # –ü–æ—Ç–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if categories['missing_params']:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ({len(categories['missing_params'])} —Ñ–∞–π–ª–æ–≤):")
        for file_path in categories['missing_params'][:5]:  # –ü–µ—Ä–≤—ã–µ 5
            analyze_file(file_path)


if __name__ == '__main__':
    main()
