#!/usr/bin/env python3
"""
–ú–µ–≥–∞—Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–∞—Ö –ü–æ–ª—è–∫–æ–≤–∞
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ XML —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ polyakov_kurs_work –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥
"""

import os
import subprocess
import time
from pathlib import Path
import json

def run_parser_on_file(xml_file_path):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –Ω–∞ –æ–¥–Ω–æ–º XML —Ñ–∞–π–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {xml_file_path.name}")
    print("=" * 80)
    
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        result = subprocess.run([
            'python3', 'kumir_pipeline.py', str(xml_file_path)
        ], capture_output=True, text=True, timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        
        end_time = time.time()
        duration = end_time - start_time
        
        success = result.returncode == 0
        output = result.stdout
        errors = result.stderr
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –≤—ã–≤–æ–¥–∞
        tasks_created = 0
        tasks_tested = 0
        success_rate = 0
        
        if "–°–æ–∑–¥–∞–Ω–æ" in output:
            try:
                line = [l for l in output.split('\n') if '–°–æ–∑–¥–∞–Ω–æ' in l][0]
                parts = line.split('/')
                if len(parts) >= 2:
                    tasks_created = int(parts[0].split()[-1])
            except:
                pass
        
        if "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:" in output:
            try:
                lines = output.split('\n')
                result_line = None
                for line in lines:
                    if '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:' in line and '/' in line:
                        result_line = line
                        break
                
                if result_line:
                    # –§–æ—Ä–º–∞—Ç: "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: 139/209 (66.5%)"
                    import re
                    match = re.search(r'(\d+)/(\d+)\s*\(([0-9.]+)%\)', result_line)
                    if match:
                        success_count = int(match.group(1))
                        total_count = int(match.group(2))
                        success_rate = float(match.group(3))
                        tasks_tested = total_count
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {xml_file_path.name}: {e}")
                pass
        
        return {
            'file': xml_file_path.name,
            'success': success,
            'duration': duration,
            'tasks_created': tasks_created,
            'tasks_tested': tasks_tested,
            'success_rate': success_rate,
            'output': output,
            'errors': errors
        }
        
    except subprocess.TimeoutExpired:
        return {
            'file': xml_file_path.name,
            'success': False,
            'duration': 300,
            'tasks_created': 0,
            'tasks_tested': 0,
            'success_rate': 0,
            'output': '',
            'errors': 'TIMEOUT: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)'
        }
    except Exception as e:
        return {
            'file': xml_file_path.name,
            'success': False,
            'duration': 0,
            'tasks_created': 0,
            'tasks_tested': 0,
            'success_rate': 0,
            'output': '',
            'errors': f'EXCEPTION: {str(e)}'
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤."""
    polyakov_dir = Path('/Users/bormotoon/VSCodeProjects/PyRobot/polyakov_kurs_work')
    
    if not polyakov_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {polyakov_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ XML —Ñ–∞–π–ª—ã
    xml_files = list(polyakov_dir.glob('*.xml'))
    if not xml_files:
        print(f"‚ùå XML —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ {polyakov_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(xml_files)} XML —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"üìÅ –ü–∞–ø–∫–∞: {polyakov_dir}")
    
    results = []
    total_start_time = time.time()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for xml_file in sorted(xml_files):
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        subprocess.run(['rm', '-rf', 'kumir_python_solutions'], capture_output=True)
        
        result = run_parser_on_file(xml_file)
        results.append(result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} {result['file']}: {result['tasks_created']} –∑–∞–¥–∞—á, {result['success_rate']:.1f}% —É—Å–ø–µ—Ö, {result['duration']:.1f}—Å")
        
        if not result['success'] and result['errors']:
            print(f"   –û—à–∏–±–∫–∞: {result['errors'][:200]}...")
    
    total_duration = time.time() - total_start_time
    
    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç
    create_detailed_report(results, total_duration)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_summary(results, total_duration)

def create_detailed_report(results, total_duration):
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª–µ."""
    timestamp = time.strftime('%Y%m%d_%H%M%S')
    report_file = f'polyakov_test_report_{timestamp}.md'
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(f"# –û—Ç—á—ë—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ Kumir –Ω–∞ –∫—É—Ä—Å–∞—Ö –ü–æ–ª—è–∫–æ–≤–∞\n\n")
        f.write(f"**–î–∞—Ç–∞:** {time.strftime('%d.%m.%Y %H:%M:%S')}\n")
        f.write(f"**–û–±—â–µ–µ –≤—Ä–µ–º—è:** {total_duration:.1f} —Å–µ–∫—É–Ω–¥\n")
        f.write(f"**–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** {len(results)}\n\n")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = sum(1 for r in results if r['success'])
        total_tasks_created = sum(r['tasks_created'] for r in results)
        total_tasks_tested = sum(r['tasks_tested'] for r in results)
        avg_success_rate = sum(r['success_rate'] for r in results if r['success']) / max(successful, 1)
        
        f.write(f"## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
        f.write(f"- **–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {successful}/{len(results)} —Ñ–∞–π–ª–æ–≤ ({successful/len(results)*100:.1f}%)\n")
        f.write(f"- **–í—Å–µ–≥–æ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ:** {total_tasks_created}\n")
        f.write(f"- **–í—Å–µ–≥–æ –∑–∞–¥–∞—á –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {total_tasks_tested}\n")
        f.write(f"- **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** {avg_success_rate:.1f}%\n\n")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º
        f.write(f"## üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n")
        
        for result in results:
            status = "‚úÖ –£–°–ü–ï–•" if result['success'] else "‚ùå –ù–ï–£–î–ê–ß–ê"
            f.write(f"### {status}: {result['file']}\n\n")
            f.write(f"- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {result['duration']:.1f}—Å\n")
            f.write(f"- **–ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ:** {result['tasks_created']}\n")
            f.write(f"- **–ó–∞–¥–∞—á –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {result['tasks_tested']}\n")
            f.write(f"- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** {result['success_rate']:.1f}%\n")
            
            if result['errors']:
                f.write(f"- **–û—à–∏–±–∫–∏:**\n```\n{result['errors']}\n```\n")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result['output']:
                lines = result['output'].split('\n')
                last_lines = [l for l in lines[-10:] if l.strip()]
                if last_lines:
                    f.write(f"- **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞:**\n```\n")
                    f.write('\n'.join(last_lines))
                    f.write(f"\n```\n")
            
            f.write(f"\n---\n\n")
        
        # –¢–æ–ø –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
        successful_results = [r for r in results if r['success']]
        if successful_results:
            best = max(successful_results, key=lambda x: x['success_rate'])
            f.write(f"## üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n")
            f.write(f"**{best['file']}**: {best['success_rate']:.1f}% ({best['tasks_tested']} –∑–∞–¥–∞—á)\n\n")
        
        failed_results = [r for r in results if not r['success']]
        if failed_results:
            f.write(f"## ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n")
            for fail in failed_results:
                f.write(f"- **{fail['file']}**: {fail['errors'][:100]}...\n")
            f.write(f"\n")
    
    print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_file}")

def print_summary(results, total_duration):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    print(f"\n" + "=" * 80)
    print(f"üéØ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–ê–†–°–ï–†–ê")
    print(f"=" * 80)
    
    successful = [r for r in results if r['success']]
    failed = [r for r in results if not r['success']]
    
    print(f"üìÅ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)} ({len(successful)/len(results)*100:.1f}%)")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {len(failed)} ({len(failed)/len(results)*100:.1f}%)")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.1f} —Å–µ–∫—É–Ω–¥")
    
    if successful:
        total_tasks_created = sum(r['tasks_created'] for r in successful)
        total_tasks_tested = sum(r['tasks_tested'] for r in successful)
        avg_success_rate = sum(r['success_rate'] for r in successful) / len(successful)
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {total_tasks_created}")
        print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_tasks_tested}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {avg_success_rate:.1f}%")
        
        # –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        best = max(successful, key=lambda x: x['success_rate'])
        print(f"\nüèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best['file']} ({best['success_rate']:.1f}%)")
        
        # –•—É–¥—à–∏–µ –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö
        if len(successful) > 1:
            worst_successful = min(successful, key=lambda x: x['success_rate'])
            print(f"‚ö†Ô∏è  –•—É–¥—à–∏–π —É—Å–ø–µ—à–Ω—ã–π: {worst_successful['file']} ({worst_successful['success_rate']:.1f}%)")
    
    if failed:
        print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for fail in failed:
            error_short = fail['errors'].split('\n')[0][:60] if fail['errors'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            print(f"   {fail['file']}: {error_short}...")
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == '__main__':
    main()
