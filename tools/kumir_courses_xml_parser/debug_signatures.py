#!/usr/bin/env python3
"""
–î–µ–±–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä –¥–ª—è array_fill –∑–∞–¥–∞—á
"""
import json
from kumir_pipeline import KumirToPythonPipeline

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
pipeline = KumirToPythonPipeline('dummy.xml')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ JSON
with open('kumir_python_solutions/tasks_data.json', 'r', encoding='utf-8') as f:
    tasks = json.load(f)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é array_fill –∑–∞–¥–∞—á—É
for task in tasks:
    if 'array_fill' in task['task_name'].lower():
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏: {task['task_name']}")
        
        task_type = pipeline.detect_task_type(task)
        print(f"  task_type: {task_type}")
        
        # –≠–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ generate_python_solution
        task_name = task.get('task_name', 'unknown_task')
        original = task.get('original', '')
        todo = task.get('todo', '')
        kumir_code = task.get('kumir_code', '')
        
        # –≠–º—É–ª–∏—Ä—É–µ–º detect_parameters
        params = []
        if '—Ü–µ–ª N' in original or '—Ü–µ–ª n' in original.lower():
            params.append('N')
        if '—Ä–µ–∑ —Ü–µ–ª—Ç–∞–± A' in original or '—Ü–µ–ª—Ç–∞–± A' in original:
            params.append('A') 
        if '–∞—Ä–≥ —Ü–µ–ª X' in original or '–∞—Ä–≥ X' in original:
            params.append('X')
        
        print(f"  params: {params}")
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–ª–∞–≥–∏
        is_function = '—Ñ—É–Ω–∫ ' in kumir_code or task_type in ['algorithm_binary_search', 'function']
        returns_value = ('–Ω–∞—á' in kumir_code and '–∑–Ω–∞—á:=' in kumir_code) or task_type in ['algorithm_binary_search', 'function']
        array_params = any('—Ü–µ–ª' in p or 'A' in p for p in [original])
        string_params = []
        has_X = 'X' in params
        
        print(f"  is_function: {is_function}")
        print(f"  returns_value: {returns_value}")
        print(f"  array_params: {array_params}")
        print(f"  has_X: {has_X}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
        if is_function or returns_value:
            print("  -> –ü–æ–ø–∞–¥–∞–µ—Ç –≤ –±–ª–æ–∫ is_function or returns_value")
        elif task_type.startswith('algorithm_') or task_type.startswith('array_'):
            print("  -> –ü–æ–ø–∞–¥–∞–µ—Ç –≤ –±–ª–æ–∫ array_ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
        else:
            print("  -> –ü–æ–ø–∞–¥–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–π –±–ª–æ–∫")
            
        print()
        break
